<<< 8장 : AOP >>>

<<프로젝트 8 : 수업목록>>  ==========================================

# 스프링 전용 jdbc
# 트랜잭션 : config 패키지 참고
# aop 로그 : AOP 패키지 참고



=================================================================
<<프로젝트 8 : 수업정리>>

[[[ 트랜잭션
- 필요한경우 : 하나의 서비스에서 2개 이상의 INSERT/UPDATE/DELETE가 호출되는 경우에 필요합니다.

# 트랜잭션의 에너테이션
# @EnableAspectJAutoProxy : aop가 있어야 트랜잭션 처리가 가능해진다
# @EnableTransactionManagement : 사용시 해당 클래스에, 트랜잭션매니저를 생성 허용, 트랜잭션 사용을 허용하는 에너테이션, @Transactional 을 찾아서 실행시키는 역할
# @Transactional : 트랜잭션이 필요한 메서드 위에 사용한다

@transactional이 생략된 이유 : 모든 예외가 발생시 트랜잭션이 자동으로 이루어졌기 때문, TransactionInterceptor에서 트랜잭션에 사용되는 경우를 임의로 설정하였다
# TransactionInterceptor : 트랜잭션을 사용하는 경우를 임의로 설정할 수 있다

# transactionmanager 인터페이스
- DataSourceTransactionManager 구현체를 사용
- datasource 정보가 필요

# TransactionInterceptor 클래스 
- 상황 : exception 예외 발생시 롤백 수행

# Advice 등록 : Advisor 인터페이스 사용
- @pointcut을 사용하는곳

* 포인트컷 표현식
/ * 포인트컷 표현식
		/* 
		 * - 형식
		  	execution(리턴타입, 패키지.클래스.메서드(매개변수))
		   - 의미
		   	 1) 리턴타입
		   	 	(1) *
		   	 	(2) void
		   	 	(3) !void
		   	 2) 매개변수
		   	 	(1) .. : 모든 매개변수
		   	 	(2) *  : 1개의 모든 매개변수
*/

[[[ AOP
# 개념 
관점지향 프로그래밍
흩어진 ASPECT(관심사)를 모듈화하는 프로그래밍 기법
특정 로직의 공통, 핵심적인 관점을 모듈화한다
컨트롤러에 요청된 이벤트를 실행하기 전후에 공통된 작업을 모듈화해서 처리
트랜잭션 처리가 가능하다

# 조인포인트 : 컨트롤러의 모든 메서드를 말한다

# 포인트컷 : 조인포인트에서 모듈화를 위해 선정한 메서드들을 말한다

#  AOP 장점 : 기존코드에 비침투적, 로직의 특정구역에 일일히 들어가야할 코드를 전부 aop에서 처리
가능하기 때문

# AOP 사용기능 
로그인전 체크, 13장 참고
트랜잭션 : 8장 참고, DataBaseConfig 하단에 존재
로그 남기기 : 8장 참고, RequestLoggingAspect 그대로 활용하면된다



****
선언적 트랜잭션
(1) @transactional 어노테이션 사용 
(2) aop 설정으로 트랜잭션 선언 , mamanger을 특정한 영역(컨테이너)에 생성하여 사용






# @AllargsConstructor 생성자 에너테이션 : @autowired를 대체할 수 있다
- 용도 : 필드값에 일일히 @autowired를 사용해줘야 하는 것과 달리
@AllargsConstructor는 복수의 필드값을 한번만 사용해서 처리한다 
- 참고 : 8장 컨트롤러 




# @RequestParam 2번째 파라미터 전달방법
(1) value 속성 : 파라미터명
(2) required 속성 : 필수여부, true/false
(3) defaultValue : 전달된 값이 없을경우 디폴트값


# 스프링 전용 jdbc 
# JdbcTemplate
- 개념 : Connection, PreparedStatement, ResultSet을 내부에서 사용하는 Spring클래스
- 기능 : DriverManagerDataSource에 의해서 Connection Pool 방식으로 동작

=================================================================
<<프로젝트 8 : 추가, 위젯, 설치, jar>>



=================================================================
<<프로젝트 8 : >>

# request를 map으로 바꾸는 방법
Map<String, String[]> map = request.getParameterMap();


