<<< 8장 : AOP >>>

<<프로젝트 8 : 수업목록>>  ==========================================

# 스프링 전용 jdbc
# 트랜잭션 : config 패키지 참고
# aop 로그 : AOP 패키지 참고



=================================================================
<<프로젝트 8 : 수업정리>>

[[[ 트랜잭션
- 필요한경우 : 하나의 서비스에서 2개 이상의 INSERT/UPDATE/DELETE가 호출되는 경우에 필요하다

# 사용조건
1. @EnableAspectJAutoProxy : transactionmanager를 사용하게 해주는 에너테이션

2. transactionmanager : 트랜잭션을 관리하는 인터페이스
- 트랜잭션 사용에 필수적으로 존재
- 조건 : db정보가 필요

3. 트랜잭션 사용
1) @transactional 에너테이션으로 직접 사용
- 기능 : 필요로하는 서비스 메서드에 직접 에너테이션을 추가하여 트랜잭션을 실시하는데 사용한다

2) 인터셉터로 자동 사용
3.2 TransactionInterceptor 클래스 / advisor 인터페이스
- 기능 : 인터셉터 기능을 이용해 트랜잭션이 실행될 조건을 임의로 만들 수 있다
- advisor을 통해서 인터셉터로 설정된 기능의 대상 범위를 정할 수 있다
* advisor을 사용할때 pointcut으로 대상을 설정한다


- 조건 transactionManager가 필요
* 이때 @transactional은 생략 가능하다


* 포인트컷 표현식
/ * 포인트컷 표현식
		/* 
		 * - 형식
		  	execution(리턴타입, 패키지.클래스.메서드(매개변수))
		   - 의미
		   	 1) 리턴타입
		   	 	(1) *
		   	 	(2) void
		   	 	(3) !void
		   	 2) 매개변수
		   	 	(1) .. : 모든 매개변수
		   	 	(2) *  : 1개의 모든 매개변수
*/



[[[ AOP
# 개념 
관점지향 프로그래밍
흩어진 ASPECT(관심사)를 모듈화하는 프로그래밍 기법
특정 로직의 공통, 핵심적인 관점을 모듈화한다
컨트롤러에 요청된 이벤트를 실행하기 전후에 공통된 작업을 모듈화해서 처리
트랜잭션 처리가 가능하다

# 조인포인트 : 컨트롤러의 모든 메서드를 말한다

# 포인트컷 : 조인포인트에서 모듈화를 위해 선정한 메서드들을 말한다

#  AOP 장점 : 기존코드에 비침투적, 로직의 특정구역에 일일히 들어가야할 코드를 전부 aop에서 처리
가능하기 때문

# AOP 사용기능 
로그인전 체크, 13장 참고
트랜잭션 : 8장 참고, DataBaseConfig 하단에 존재
로그 남기기 : 8장 참고, RequestLoggingAspect 그대로 활용하면된다



# @AllargsConstructor 생성자 에너테이션 : @autowired를 대체할 수 있다
- 용도 : 필드값에 일일히 @autowired를 사용해줘야 하는 것과 달리
@AllargsConstructor는 복수의 필드값을 한번만 사용해서 처리한다 
- 참고 : 8장 컨트롤러 



# 스프링 전용 jdbc 
# JdbcTemplate
- 개념 : Connection, PreparedStatement, ResultSet을 내부에서 사용하는 Spring클래스
- 기능 : DriverManagerDataSource에 의해서 Connection Pool 방식으로 동작

=================================================================
<<프로젝트 8 : 추가, 위젯, 설치, jar>>



=================================================================
<<프로젝트 8 : >>

# request를 map으로 바꾸는 방법
Map<String, String[]> map = request.getParameterMap();


