[ 4장 : HTTP요청_포워드_리다이렉트_매개변수_속성 ]

1. HTTP 요청방법
2. 포워드와 리다이렉트의 매개변수, 속성저장법
3. 컨트롤러 맵핑


====================================================================================================
<프로젝트 4 : 개념>

[[[ HTTP 요청방식  --------------------------------------
- a 태그    	: get방식만 가능
- location.href : get 방식만 가능
- form 태그 	: get,post 방식 둘다가능
- ajax          : get,post 방식 둘다 가능
- img


[[[ 요청영역에 속성 저장하는법 3가지 : mycontroller1 참고  ------------------------------
(1) HttpServletRequest request 객체 사용하는법				-> 그냥 이걸 쓰면된다 ---- *
(2) @RequestParam 
(1) value 속성 : 파라미터명
(2) required 속성 : 필수여부, true/false
(3) defaultValue : 전달된 값이 없을경우 디폴트값
(3) 파라미터를 필드값으로 지닌 클래스객체
* 2,3 번 방법은 제약이 있다 ex) session 사용시


[[[ 포워드, 리다이렉트의 매개변수와 속성저장법  ------------------------------------------
# 포워드 이동 + 속성저장용 매개변수 (이상적인 방법)
- 형태 : (HttpServletRequest request, Model model)
- 설명 : request로 파라미터를 가져오고, 포워드는 model에 속성저장을 한다
- model : model.addAttribute("속성", 속성값)

# 리다이렉트 이동 + 속성 저장용 매개변수 
- 형태 : (HttpServletRequest request)
- 설명 : request로 파라미터를 가져오고, 새로운 맵핑을 반환한다(새로운 요청)
- 파라미터 : 반환 맵핑에 직접 작성해줘야한다

# 리다이렉트 이동시 파라미터를 가지고 가는 방법
- 형태 : (HttpServletRequest request, RedirectAttributes redirectAttributes)
- 설명 : redirectattributes에 속성 저장을 한다
ex) redirectAttributes.addFlashAttribute("board", board);


[[[ 컨트롤러 : 중간 맵핑 설정
- 어노테이션 : @RequestMapping("맵핑명")
- 기능 : 각 메서드별 공통의 맵핑값을 별도로 설정가능
ex) 맵핑이 /member/detail이면 member을 중간맵핑으로 등록 가능하다


[[[ 컨트롤러가 복수인 경우
- 그냥 맵핑에 맞는 요청을 알아서 찾아가는것 같다
- 중간맵핑 @RequestMapping을 이용해 컨트롤러를 구분하여 가시성을 높일 수 있다


[[ 기타
* model을 사용하면 포워드처럼 동작하기 때문에 리다이렉트에서는 사용하지않는다
* 파라미터를 jsp로 전송한 경우 저장시킨 속성 뿐 아니라 param 객체를 이용해서도 전달받은 값을 확인할 수 있다
* 스프링은 파라미터로 null값이 전달되어도 null로 인한 오류발생과 작동문제가 발생하지 않는다






================================================================================================
<프로젝트 4 : 정리>





================================================================================================
<프로젝트 4 : 추가>






