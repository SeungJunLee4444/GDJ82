[ 3장 : IOC개념과 의존성주입 ]

# 개념 해석
* IOC 컨테이너 = 스프링 컨테이너
* DI, 의존성주입 = @Autowired로 저장된 자바빈 불러오기

====================================================================================================
<프로젝트 3 : 개념>

[[[ IOC, IOC 컨테이너, DI, DL의 개념 ----------------------------------------------------
- IOC : 메서드, 객체의 호출이 사용자가 아닌 외부(컨테이너)에서 결정하는 방법을 말함
- IOC 컨테이너 : 스프링 컨테이너와 동일한 말, 내부에 저장된 bean들은 싱글턴 패턴을 가지게 된다
- DL : 의존성 검색, 컨테이너에 저장된 bean을 LookUp, bean의 id와 class 정보를 이용해 검색
* DI : 의존성 주입, 스프링 컨테이너에 저장된 bean을 가져와 특정 필드, 생성자, setter 메서드에 
@Autowired 어노테이션을 이용해 같은 타입(클래스)의 bean을 주입하는 것을 말한다

[[[ 요청방식에 따른 @어노테이션
- GET방식   : @GetMapping("mapping")
- POST 방식 : @PostMapping("mapping")
* 주의 : 동일한 mapping이 반복 사용되면 오류가 발생 ---- * 


[[[ @Bean을 주입하는 에너테이션 3가지
- @Autowired : 타입(class)가 일치하는 bean을 찾아온다
* 우선적으로 타입을 확인하고 동일한 타입인 경우, 차선책으로 필드의 객체명, 또는 매개변수명과 자바빈의 id이 동일한 것을 찾는다 ---- *
(그외 : @Inject(class로만 구분), @Resource(id가 일치하는 bean))


[[[ @Bean 주입하는 대상 3가지
(1) 필드	: 필드값에 @Autowired를 사용
(2) 생성자  : 생성자에 @Autowired 사용, 생성자의 매개변수로 bean 가져오기
(3) setter  : setter 메서드에 @Autowired 사용, setter의 매개변수로 bean 가져오기


[[[ 컨테이너에 따른 @Autowired
(1) Application context(root-context.xml)
- 우선적으로 동일한 타입(클래스)를 비교하고,
- 차선책으로 bean의 'id'와 필드명, 또는 매개변수명이 동일한지 확인한다

(2) SpringBeanConfig
- 우선적으로 동일한 타입을 비교하고,
- 차선책으로 bean의 '메서드명'과 필드의 객체명 또는 매개변수명과 동일해야한다

* SpringBeanConfig의 메서드명은 Application context의 id와 동일한 역할을 수행한다



[[[ 포워드, 리다이렉트의 반환값 차이
(1) 포워드 
- 용도 : jsp 반환, 해당 jsp로 이동
- 형태 : return "패키지/jsp파일명"
(2) 리다이렉트 : 맵핑 반환, 새로운 요청 url 반환
- 용도 : 맵핑 반환
- 형태 : return "redirect:/맵핑"

================================================================================================
<프로젝트 3 : 목록>


================================================================================================
<프로젝트 3 : 추가>

# SpringBeanConfig에서 bean 생성시 작명
(1) @Bean(value="")와 (2) 메서드명 두가지 방법이 있다
(1)의 경우 메서드명은 상관없으며, (2)방법의 경우 @Autowired에 사용되는 객체명과 동일할 필요가 있다











