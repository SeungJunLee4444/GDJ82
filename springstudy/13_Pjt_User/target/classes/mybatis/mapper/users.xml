<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gdu.app13.mapper.UserMapper">

	<!--  # id, pw, email 입력점검 통합 + 로그인 유지를 이용한 로그인 + 마이페이지 가기전 비번확인 -->
	<select id="selectUserByMap" parameterType="Map" resultType="UserDTO">
		SELECT USER_NO, ID, PW, NAME, GENDER, EMAIL, MOBILE, BIRTHYEAR, BIRTHDAY, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS, AGREE_CODE, SNS_TYPE, JOIN_DATE, PW_MODIFY_DATE, INFO_MODIFY_DATE, SESSION_ID, SESSION_LIMIT_DATE
		  FROM USERS
		<where>
	  		<if test="id != null">
	   			 ID like #{id}
	  		</if>
	  		<if test="pw != null">
	   			 AND PW like #{pw}
	  		</if>
	  		<if test="email != null">
	   			 AND EMAIL like #{email}
	  		</if>
	  		<if test="sessionId != null">
	  			AND SESSION_ID = #{sessionId}
	  			AND SESSION_LIMIT_DATE > SYSDATE	<!--  * 세션 유지시간이 남았는지? -->
	  		</if>
  		</where>
  	
	</select>
	<!--  * where 태그 : and, or무시, if태그 : 조건
	ex) 예시
	 <where>
    <if test="state != null">
         state = #{state}
    </if>
    <if test="title != null">
        AND title like #{title}
    </if>
    <if test="author != null and author.name != null">
        AND author_name like #{author.name}
    </if>
  </where>
	
	 -->

	<!--  # 유저 아이디 조회 : 아이디 중복체크-->
	<select id="selectUserById" parameterType="String" resultType="UserDTO">
		SELECT USER_NO, ID, PW, NAME, GENDER, EMAIL, MOBILE, BIRTHYEAR, BIRTHDAY, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS, AGREE_CODE, SNS_TYPE, JOIN_DATE, PW_MODIFY_DATE, INFO_MODIFY_DATE, SESSION_ID, SESSION_LIMIT_DATE
		  FROM USERS
		 WHERE ID = #{id}
	</select>
	
	<select id="selectRetireUserById" parameterType="String" resultType="RetireUserDTO">
		SELECT ID
		  FROM RETIRE_USERS
		 WHERE ID = #{id}
	</select>
	
	<!--  # 유저 이메일 조회 : 이메일 중복체크-->
	<select id="selectUserByEmail" parameterType="String" resultType="UserDTO">
		SELECT USER_NO, ID, PW, NAME, GENDER, EMAIL, MOBILE, BIRTHYEAR, BIRTHDAY, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS, AGREE_CODE, SNS_TYPE, JOIN_DATE, PW_MODIFY_DATE, INFO_MODIFY_DATE, SESSION_ID, SESSION_LIMIT_DATE
		  FROM USERS
		 WHERE EMAIL = #{email}
	</select>
	
	<!-- [[[ 회원가입 + 로그인  -->
	<!-- - 회원가입 : user테이블, 로그인 access_log 테이블, pk는 user_id, fk는 id
		access_log에 update + insert
		user에 insert
	  -->
	  
	<!--  # 일반 회원가입  -->
	<insert id="insertUser" parameterType="UserDTO">
		INSERT INTO USERS
			(USER_NO, ID, PW, NAME, GENDER, EMAIL, MOBILE, BIRTHYEAR, BIRTHDAY, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS, AGREE_CODE, SNS_TYPE, JOIN_DATE, PW_MODIFY_DATE, INFO_MODIFY_DATE, SESSION_ID, SESSION_LIMIT_DATE)
		VALUES
			(USERS_SEQ.NEXTVAL, #{id}, #{pw}, #{name}, #{gender}, #{email}, #{mobile}, #{birthyear}, #{birthday}, #{postcode}, #{roadAddress}, #{jibunAddress}, #{detailAddress}, #{extraAddress}, #{agreeCode}, NULL, SYSDATE, SYSDATE, SYSDATE, NULL, NULL)
	</insert>
	<!--  # 로그인 기록(ACCESS_LOG) 남기기 : 가져오는 값은 access_log의 id -->
	<update id="updateAccessLog" parameterType="String">
		UPDATE ACCESS_LOG 
			SET LAST_LOGIN_DATE = SYSDATE
		WHERE ID = #{id}
	</update>
	<!--  # 로그인 기록 저장 : 로그아웃과 함꼐 사용-->
	<insert id="insertAccessLog" parameterType="String">
		INSERT INTO ACCESS_LOG
			(ACCESS_LOG_NO, ID, LAST_LOGIN_DATE)
		VALUES 
			(ACCESS_LOG_SEQ.NEXTVAL, #{id}, SYSDATE)
	</insert>
	
	<!--  # 회원탈퇴1 : users 테이블에서 제거  -->
	<delete id="deleteUser" parameterType="int">
		DELETE 
			FROM USERS
			WHERE USER_NO = #{userNo}
	</delete>
	
	<!--  # 회원탈퇴2 : retire 테이블에 추가  -->
	<insert id="insertRetireUser" parameterType="RetireUserDTO">
		INSERT INTO RETIRE_USERS
			(USER_NO, ID, JOIN_DATE, RETIRE_DATE)
		VALUES
			(#{userNo}, #{id}, #{joinDate}, SYSDATE)
	</insert>
	
	<!--  # 로그인 -->
	<select id="selectUserByIdPw" parameterType="UserDTO" resultType="UserDTO">
		SELECT USER_NO, ID, PW, NAME, GENDER, EMAIL, MOBILE, BIRTHYEAR, BIRTHDAY, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS, AGREE_CODE, SNS_TYPE, JOIN_DATE, PW_MODIFY_DATE, INFO_MODIFY_DATE, SESSION_ID, SESSION_LIMIT_DATE
		  FROM USERS
		 WHERE ID = #{id}
		   AND PW = #{pw}
	</select>
	
	<!--  # 로그인 유지 : SESSION_ID, SESSION_LIMIT_DATE 업데이트 -->
	<update id="updateSessionInfo" parameterType="UserDTO">
		UPDATE USERS
			SET SESSION_ID = #{sessionId}
			, SESSION_LIMIT_DATE = #{sessionLimitDate}
		WHERE ID = #{id}
	</update>
	

	
	<!--  # 비밀번호 변경 : 변경된 비밀번호와 비밀번호 수정 날짜 -->
	<update id="updateUserPassword" parameterType="UserDto">
		UPDATE USERS
			SET PW = #{pw}, PW_MODIFY_DATE = SYSDATE
		WHERE USER_NO = #{userNo}
	
	</update>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
</mapper>