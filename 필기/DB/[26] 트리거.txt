[26] 트리거
* 용도
(1)DML문 실행시, 특정 동작이 자동으로 수행되게 만들어주는것	
(2) OLD 테이블을 쓰면 수정하기전 데이터를 확인할 수도 있음

* 사용자함수, 프로시저와 달리, 반환을 위한 특정한 실행문이 없음(EXECUTE, RETURN)이 없고,
DML을 사용시 해당 설정이 자동 실행된다			

1) 종류 :
  DML 전에 수행되는 BEFORE 트리거
  직후에 수행되는 AFTER 트리거

2) 형식
CREATE [OR REPLACE] TRIGGER 트리거명
[BEFORE / AFTER]				(BEFORE : 데이터 수정 전에 트리거작동, AFTER : 데이터 수정 후에 트리거 작동) & AFTER, BEFORE
[INSERT OR UPDATE OR DELETE]		(사용할 DML문)
[ON 테이블명]				(조건)
[FOR EACH ROW]				(각각의 행마다 트리거가 동작)
BEGIN 
	트리거 작업
END [트리거명];

=> 트리거 과정 요약 : ON 특정 테이블이 DML이 시행될때 데이터 수정전/후에 따라 특정 트리거가 작동한다			& 트리거 핵심

* 프로시저, 사용자함수, 트리거의 차이										& 차이점
* 프로시저
여러 쿼리문을 한번에 작동, 매개변수에 입력(IN), 출력(OUT)여부 작성, PLSQL에서 EXECUTE 프로시저명();로 실행
* 사용자함수
사용자가 만든 함수, 매개변수에(IN,OUT)사용X, 입력있음, 출력시 RETURN 사용, SELECT문에서 함수명();으로 실행
* 트리거
DML문 시행시, 특정 동작이 자동으로 수행되게 함, 작업 이전의 데이터 열람가능, 조건에 ON사용
(1) INSERT	: NULL 반환
(2) UPDATE	: 수정전 데이터 반환
(3) DELETE	: 삭제전 데이터 반환


3) 실습
(1) 

- 트리거 TRIG1 정의
CREATE OR REPLACE TRIGGER TRIG1
AFTER	(DML 이후 트리거)
UPDATE	(사용할 DML문)
	ON DEPARTMENT 	(부서 테이블)
           FOR EACH ROW     (UPDATE되는 행마다 트리거 동작)	

BEGIN
	DBMS_OUTPUT.PUT_LINE('업데이트 성공')		(DML문 실행시 동작)
END TRIG1;

- 트리거 TRIG1 동작확인

UPDATE DEPARTMENT SET LOCATION = '인천' WHERE DEPT_NO = 1;
=> 업데이트를 실행하면 "업데이트 성공"이라고 출력

(2)

CREATE OR REPLACE TRIGGER TRIG2
	AFTER
	INSERT OR UPDATE OR DELETE
	ON DEPARTMENT
	FOR EACH ROW			(TRIG2 정의)
	
BEGIN 
	IF INSERTING THEN
      	     DBMS_OUTPUT.PUT_LINE('INSERT 이후 동작');
  	ELSIF UPDATING THEN
        	     DBMS_OUTPUT.PUT_LINE('UPDATE 이후 동작');
   	ELSIF DELETING THEN
   	     DBMS_OUTPUT.PUT_LINE('DELETE 이후 동작');
   	END IF;
END TRIG2;				(TRIG2 생성)

-- TRIG2 동작확인



(3) 
* OLD 테이블											& OLD
=> DML문 수행 이전 정보가 저장되는 테이블
=> ORACLE에서는 :OLD 호출
=> AFTER 트리거와 함께 사용

* OLD 테이블을 쓰면, 조회시 DML문에 따라 아래의 값들이 출력된다
=> INSERT 동작 이전 :	 NULL
=> UPDATE 동작 이전 : 	수정 전 데이터
=> DELETE 동작 이전 : 	삭제된 데이터

CREATE OR REPLACE TRIGGER TRIG3
	AFTER
	UPDATE OR DELETE
	ON EMPLOYEE
	FOR EACH ROW
BEGIN
	DBMS_OUTPUT.PUT_LINE(:OLD.NAME);
END TRIG3;

-- 동작확인											& OLD 효과
UPDATE EMPLOYEE SET NAME = '구민서' WHERE EMP_NO = 1002;
=> 김민서를 구민서로 변경, UPDATE 특성에 따라 수정 전 데이터인 김민서가 출력

DELETE FROM EMPLOYEE WHERE EMP_NO = 1003;
=> 1003번 학생인 이은영 삭제, DELETE의 특성에 따라 삭제 전 데이터인 이은영 출력

ROLLBACK;	(롤백시 값 원상복구)

(4) 트리거 최종 실습
예시 : 사원 테이블에서 삭제된 사원정보를 퇴사자 테이블에 삽입하기
=> 해당 사원정보를 내가 사원에서 DELETE하면, 트리거가 자동으로 퇴사자 테이블에 INSERT

* 트리거 생성
-- 사원 테이블에서 삭제된 데이터를 RETIRES 테이블에 삽입하는 트리거 작성 
CREATE OR REPLACE TRIGGER RETIRE_TRIG
	AFTER DELETE				-- 조건1	
	ON EMPLOYEES				-- 조건2
	FOR EACH ROW	
BEGIN
	INSERT INTO RETIRES(RETIRED_ID, RETIRED_DATE, EMPLOYEE_ID
			  , FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER
			  , HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT
			  , MANAGER_ID, DEPARTMENT_ID);			(사원테이블에서 복제해온 컬럼들)
	
	VALUES(RETIRE_SEQ.NEXTVAL, SYSDATE, :OLD.EMPLOYEE_ID, :OLD.FIRST_NAME
			  , :OLD.LAST_NAME, :OLD.EMAIL, :OLD.PHONE_NUMBER
			  , :OLD.HIRE_DATE, :OLD.JOB_ID, :OLD.SALARY, :OLD.COMMISSION_PCT
			  , :OLD.MANAGER_ID, :OLD.DEPARTMENT_ID);
	(DELETE로 삭제하여 저장된 OLD 테이블의 데이터를 RETIRE 테이블에 삽입)
END RETIRE_TRIG; 

DELETE FROM EMPLOYEES WHERE EMPLOYEE_ID = 100;	(아이디가 100인 사원의 모든 정보가 DELETE
						DELETE사용과 동시에 RETIRES 테이블에 삽입)
		

















* 사전준비
-- 퇴사자 테이블 생성
CREATE TABLE TREITRES
	AS(SELECT * FROM EMPLOYEES WHERE 1 =2);
	* 다른 테이블의 칼럼을 값없이 그대로 복제하는 쿼리문					& 칼럼만 복제

-- RETIRE_ID, RETIRE_DATE 칼럼 추가
ALTER TABLE RETIRES ADD RETIRED_ID NUMBER;
ALTER TABLE RETIRES ADD RETIRED_DATE DATE;
					* DROP, RENAME  	=> COLUMN 칼럼명		& DDL COLUMN 유무
					* ADD, MODIFY	=> 칼럼명'만'

-- RETIRE_ID 기본키 설정
ALTER TABLE RETIRES ADD CONSTRAINT PK_RETIRE PRIMARY KEY(RETIRE_ID);

-- RETIRE_SEQ 시퀸스 생성									& 시퀸스 필수
DROP SEQUENCE RETIRE_SEQ;
CREATE SEQUENCE RETIRE_SEQ NOCACHE;				

* 시퀸스
=> 번호표를 자동으로 생성해주는 객체

1) 구조
CREATE SEQUENCE 시퀸스명
	START WITH		=> 생략하면 1, 생성 이후 유일하게 수정불가
	INCREMENT BY 증가값	=> 생략하면 1
	MINVALUE 최소값		=> 시작값과 동일
	MAXVALUE 최대값		=> 역순에 사용?
	CACHE			=> NOCACHE 권장
	CYCLE			=> 생략가능, NOCYCLE(중복불가능)

* 필수 : NOCACHE













