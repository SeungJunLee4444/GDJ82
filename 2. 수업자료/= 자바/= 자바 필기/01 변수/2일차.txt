2일차 변수와 제어문

[1] 변수
[2] 연산자
[3] 조건문
[4] 제어문


[1] 변수
1. main 메소드
=> JVM이 실행하기 위한 기본 메소드
=> 가장 최근에 열린 main 메소드를 자바에서는 실행한다

2. 변수 선언
=> 구성: 데이터 타입 + 변수명(식별자) = 변수값; 
=> 변수명으로 정의된 특정한 공간이 형성되며, 여기에 변수값이 저장
=> 변수값은 새로 생기는 것이 아닌 자바 어딘가에서 가져오는 것



1) 식별자
=> 한글X, 특수기호X(_, $제외), 숫자로 시작X, 자바에서 사용중인 키워드X

2) 식별자명 작성법
(1) MyHome : 어퍼 카멜 케이스, 클래스명 작성시 사용
(2) myHome : 로어 카멜 케이스, 메소드, 변수명에 사용
(3) MY_HOME : 스네이크 케이스, 변수가 상수거나, DB에서 사용할 떄

3. 데이터 타입
1) 기본타입
=> 저장하는 데이터의 타입에 따라 맞춰 사용
(1) boolean : 참거짓 저장
(2) char : 문자 저장
(3) byte, int, long : 정수저장
* int 범위는 +-21억 이내
* long은 값 뒤에 L을 붙임
(4) double : 실수 저장
* -1.7E308 : -1.7 * 10 308제곱

2) 문자열 타입
=> 원래 사용법 : String name = new String("한국");
=> 기본 타입은 아니지만, 자주 사용되어 자바에서 기본타입처럼 지원

3) 변환
(1) 프로모션 
=> 상위범위를 지닌 데이터 타입으로 값을 변환
=> 다른 타입끼리 연산이 될 떄는 더 큰 범위를 지닌 타입으로 통일
ex) double b = 1.5 + 5; (double 타입으로 변환)

(2) 캐스팅 (강제변환)
=> 작은 범위를 지닌 데이터 타입으로 값을 변환
=> 실수에서 정수로 강제변환을 하면 소수점은 모두 손실됨
----------------------------------------------------------------------------------
=> 정수에서도 실수로 강제변환을 할 수 있다 *****  oo
& 변환하려는 타입의 범위가 크든, 작든 캐스팅은 가능하다 ***
(연습문제는 범위의 문제가 아니라 타입의 문제였던것)

ex) 7나누기 2로 3.5라는 값을 도출하고 싶을 때
int a =7;
int b =2;
double result = (double)a / b (두 변수중 하나, 또는 둘다에 double 강제변환)

* 예전에 비슷한 문제를 공부했을 때: 나누는 수 중 하나가 실수였고,
더 큰 범위를 지닌 값에 맞춰서 값이 도출되었기 때문에 double 타입을 선언한것
-----------------------------------------------------------------------------------
4) 기본타입과 문자열의 변환
(1) string 타입을 기본타입으로 변환
=> string을 int로
String strScore = "100";
int score = Integer.parseInt(strScore);

=> string을 long로
String strMoney = "10000000";
long money = Long.parseLong(strMoney);

=> string을 double로
String strGrade = "4.5";
double grade = Double.parseDouble(strGrade);
 * 메소드와 변수명은 로우 카멜 케이스로 작성

(2) string타입을 기본타입으로 변환
int age = 100;
String strAge = String.valueOf(age);

4) 참조타입
=> 메모리 1바이트 마다 고유의 주소값을 가지고 이를 참조라 한다
=> 참조타입은 값을 저장하지 않고, 메모리 고유의 주소값을 저장
ex) String aaa = "vb";  (vb의 주소값 150(임의)를 참조);
=> 주소값은 16진수로 구성(ex 0x)
=> 참조값은 주소값이기에 임의로 수정할 수 없다

4. 자바 프로젝트 사용
1) 자바의 생성과 실행과정
(1) src에 자바 파일을 보관
(2) javac가 자바파일을 컴파일
(3) 자바 파일을 .class 파일로 변경
(4) bin폴더에 .class 파일을 보관
(5) JVM이 .class 파일을 실행

2) package 사용
=> 동일한 이름의 클래스 명을 구분하여 사용하기 위한 상위폴더 개념
=> ex) 기아자동차, 삼성자동차, 현대 자동차를 동일하게 car 이라고 클래스명을
지어도 별도로 구분할 수 있다
=> 패키지명은 소문자로 작성한다
=> 실무에서는 회사 도메인을 거꾸로 입력하기도 한다
(com.samsung.galaxy)

5. 이스케이프 문자
1) \n : 줄바꿈
2) \t : tab
3) '\''. "\'" : 작은따음표 출력 
4) '\"'. "\"" : 큰따음표 출력



[2] 연산자
1. 사칙연산
=> +, -, *, /, %
* 나누기와 퍼센트를 이용해 나눈 몫과 나머지 값을 산출하며,
이를 분초계산에 응용할 수 있다

2. 전위연산
=> ++a, b--

3. 대입연산
1) 대입연산
=> =(등호)를 대입연산이라 말한다 ( * '같다'의 의미가 아님)

2) 복합대입연산
=> +=, -=, *=, /=, %= 등

* 정수와 실수의 연산시 주의사항
=> 정수와 실수의 연산은 무조건 실수 기준으로 값이 도출된다

ex) long balance = 10000;
balance *= 1.05; 
=> 곱했다는 연산이 들어갔기 때문에 자동적으로 실수값으로 변환된다

ex) balance = balance * 1.05;
=> 곱했다는 연산으로 값은 실수인데, 변수타입은 long 그대로 이므로 실패
* 이 차이점을 명확히 구분할 것

[3] 깃 설치와 깃허브 세팅
=> 깃허브는 자신이 만든 코드를 업로드하는 사이트
=> 로컬 저장소와 원격 저장소를 만들어 연결해야함

1. 로컬 레파지토리 생성 (1회)
1) 내 컴퓨터에 로컬저장소 만들기
(1) git bash 실행
(2) c: GDJ 디렉터리로 이동
(3) gitt init 입력 : GDJ폴더를 루트 디렉토리로 선언

2) 사용자 등록하기 (1회)
1) 사용자 이름 : git config user.name 'lesngjn82'
2) 사용자 메일 : git config user.email 'email'

3) 스테이징 하기 (매번)
=> 어떤 파일을 레파지토리에 올려서 관리할지
(1) gitt add 파일이름 -특정 파일만 스태이징
(2) git add . -모든 파일을 스태이징

4) 커밋하기(저장) (매번)
(1) git commit 엔터
(2) vim 편집기가 열림
(3) a를 눌러서 추가모드 진입
(4) 간단한 커밋 message 작성 (날짜)
(5) esc로 insert 모드 나오기
(6) :wq를 눌러서 vim 편집기에서 빠져나오기
(wq는 저장하고 끝낸다는 의미)

=> 4) 간단한 방법 : git commit -m '커밋메시지(날짜)' (vim 편집기 없이 실행)


2. 원격 레파지토리 생성
1) 깃허브 회원가입

2) 레퍼지토리 만들기
(1) name : GDJ
(2) 권한 : public
(3) add README.md
(4) .gitignore -java 선택
(업로드시 자바와 관련된 필요없는 파일을 깃허브에서 자체적으로 걸러줌)

3) 편집으로 .gitignore에 업로드 제외대상 추가하기
ex) images, installer 등

3. 두 곳 연결하기
1) 원격 레퍼지토리 주소 확인하기
https://github.com/seungjunleelllll/GDJ.git

2) 원격 레퍼지토리 등록
git remote add origin '원격 레퍼지토리 주소' 
=> 주소 추가
(git remote remove origin => 주소제거)

3) 원격 레퍼지토리 내용을 로컬 레퍼지토리로 내려받기
* 원격과 로컬의 연결점이 없기 때문에 일단 원격에서 내려받기를 해줘야함
git pull origin main (오류발생)
=> git pull origin main --allowtab , 이후 :wq 엔터

4) 업데이트된 로컬 레퍼지토리 내용을 원격 레퍼지토리에 올리기
git push origin main

* 로컬 폴더의 파일 구성이 변헀을 때 (ex 폴더 삭제)
=> 로컬로 돌아가서
1. 스테이징 : git add .
2. 커밋 : git commit -m '날짜'
=> 이후 4)번 실시

5) 깃허브에서 엑세스 토큰 발급 
=> 기간과 repo 선택


& 단축키
1. 자동완성: ctrl + 스페이스바
2. 주석: // 한줄짜리 주석, /* 여러줄 주석
3. 실행 단축키: ctrl + f11
4. _ : 언더바, 언더스코어, 밑줄
5. ctrl + alt + 위아래 : 복사

 