& 클래스

[1] 클래스 
1. 클래스 작성시 구성
=> 필드 + 생성자 + 메서드 순으로 작성

-----------------------------------------------------------------------------------ㅣ

[1-1] 메서드
=> 메서드는 통상적으로 get(확인용), set(값수정용) 이 있으며,
source의 getter and setter로 쉽게 만들 수 있다 *

2. 생성자
=> new 연산자를 통해 인스턴스(실체화된) 객체를 생성할 때 사용한다
* 매서드 이름은 클래스 이름과 무조건 동일해야한다
* 반환타입이 없다(void(반환값이 없는)와 달리 애초에 작성안하는 식)
=> 생성자를 선언하면 필드값이 초기화된다 *

1) 디폴트 생성자
=> 자바가 자동으로 만들어주는 기본 생성자
ex) 
Computer myCom = new Computer();
* new는 생성자 호출을 뜻한다

2) 개발자가 직접 만든 생성자
=> 생성자 메서드를 사용하여 매개변수를 이용해, 
초기값을 처음부터 작성할 수 있다 *
ex) 
(1)
Computer myCom = new Computer("gram", 150);
=> 난수를 대입하여 필드값을 처음부터 지정할 수 있다
(2)
Computer(String pModel, int pPrice) {
	model = pModel; 
	price = pPrice; 	
}
=> model, price 필드값에 매개변수에 저장된 난수를 저장

-----------------------------------------------------------------------------------ㅣ

3. 정보 은닉
=> 객체 내부의 필드값을 외부의 클래스에서 볼수 없게 하는 것을 말함
1) 접근제어자
(1) public		* : 어느 패키지, 클래스에서든 접근가능
(2) private	* : 해당 클래스 내부에서만 접근가능
(3) default	: 같은 패키지의 클래스에서만 접근가능

-----------------------------------------------------------------------------------ㅣ

4. get과 set 메서드 작업
=> get은 필드가 private일 경우, 필드값을 우회하여 확인하기 위한 메서드작업
=> set은 필드값을 입력, 수정하기 위한 메서드 작업

1) this의 기능
(1) 해당 클래스 내 필드값을 호출(매개변수와 혼선이 없기 위해)
public void setId (String id) {
	this.id = id;
}
=> this 선언시, 매개변수와 필드의 이름이 같아도 자바는 다르게 인식하게됨 *
* 메서드 내에서 필드를 가져올 때 꼭 쓸것

(2) 다른 생성자의 내용 가져오기


-----------------------------------------------------------------------------------ㅣ
-----------------------------------------------------------------------------------ㅣ

& 클래스 패키지(7~8) 리뷰
1. 클래스 선언 유의점
* 메인 메소드에서 해당 메인 메소드가 위치한 클래스를 호출할 수 없다
ex) 
UserMain 클래스의 main 메소드
=> UserMain 클래스 선언 불가능

* main 메소드가 없으면 선언가능
ex) 
User 클래스에서 User 클래스 선언 가능

2. 클래스 메소드 연속선언 유의점
ex) school 클래스(student 클래스 선언) , student 클래스 필드값 name
=> schoold 클래스는 student 클래스의 필드변수를 참조하여,
student 필드변수 name을 한번에 호출할 수 있다
=> school.students[i].name	

3. 메서드 타입 --------------------------------------------------?
=> 기본적으로 생성자는 타입이 없다
=> 반환할 값이 있으면 int double string 등을 사용하고 없으면 void를 쓴다
=> 매서드의 반환타입은 필드타입과 동일하게 쓴다
=> 만약 매개변수로 받을 타입이 다양하다면 필드의 타입도 다양하다
ex) 
int add(int a, int b) {			
	int result = a + b;			
	return result;			
}

4. void와 return의 관계
1) void 
=> 반환값이 없는 경우에 쓰는 타입으로, return; 사용 또는 생략한다
* 반환값이 없다는 것은 사용한 클래스의 필드값 내에 난수를 저장한다는 것을 말한다
(매개변수를 사용하든, 안하든)
* 반환값이 있으면 반환타입을 int boolean string 등을 사용, 없으면 void


ex1)
void addoil(int o) 
oil += o;
car.addoil(50);
=> 50이라는 난수와 int o 매개변수를 통해 car클래스의 oil 필드값을 set

ex2)
void pushbrake() {
speed -= 25;
oil--;
car.pushaccel();
=> pushbrake 메서드를 한번 쓸때마다 위의 메서드를 실행시킴 *


2) return
=> if문 안에서 반복문, 메서드에서 탈출하는데 사용
* if문에서 return과 달리 break는 if문만 탈출하고 반복문은 벗어나지못한다 *
* 자료형인 경우 반환값을 옆에 작성한다
* 반환값이 있든 없든 메서드를 실행한다 해서 출력문이 역할을 대신하는 것은 아니다 *
ex)
return a + b;
return "잔" + 변수명;

5. 메서드 오버로딩
=> 이름이 같은 메서드들이 각자 '매개변수'의 타입, 개수가 서로 다르면
같은 이름으로 메서드 생성이 가능하다
* 반환타입과 반환값은 영향을 주지 않는다, 매개변수의 차이가 중요
ex)
int add(int a, int b) {
return a + b;
double add(int a, double b, int c) {
return a - b;
=> 매개변수가 다른 타입, 개수가 다르면 성공

6. 선언 메서드
void status() {
	System.out.println(id);
	System.out.println(password);
	System.out.println(email);
	System.out.println(point);
	System.out.println(isVip);
}
=> 실행문을 메서드로 만들어서 한꺼번에 반환가능

7. private를 이용한 메서드{메서드(조건)} 활용법
ex) 만약 확인된 백화점 포인트에 따라 vip 여부를 확인하고 싶다면
1) isvip의 접근제어자를 private로 만들어 접근불가능하게 만들것
2) setisvip 메서드를 setpoint 안에 집어넣어 10000점 이상은 참으로 나오도록 조건작성
* 메서드 두개를 다른 하나에 넣어 조건부로 값을 도출하도록 만들수도 있다

public void setPoint (int Point) {
	this.point = Point;
	setIsVip(point >= 10000);
}	
=> point가 만점 이상이면 setisvip가 참이 된다 *
private void setIsVip (boolean IsVip) {
	this.isVip = IsVip;
}




