[mybatis를 이용한 mvc패턴으로 crud 구현하기]
# 개념정리
1) crud 
- 정의 :  create, read, update, delete의 줄임말, 대부분의 컴퓨터 소프트웨어가 지닌 
기본적인 데이터처리 기능 4가지를 말하는 용어

2) mybatis 프레임워크  
1) mybatis : 쿼리기반 웹 에플리케이션 개발에 사용되는 'sql 매퍼 프레임워크'
(1) 기존의 jdbc : 자바코드 안에 sql문을 작성해서 반복적이고, 가독성이 떨어진다
(2) mybatis : xml 파일에 별도로 sql문을 작성, 가독성, sql 변환이 자유로움
- 'xml 파일 내에서 select, create, update, delete를 태그로 작성할 수 있다'
- 즉, jdbc 대신해서 더욱 효율적으로 db와 연동하는 작업을 실행한다

- 특징 
- dao의 sql문을 별도의 xml파일로 분리
- 조건 : mybatis 전용 jar 파일필요

3) mvc : model, view, controller의 줄임말
- 정의 : 동적 웹 개발에서 프론트영역과 백엔드 영역을 구분하는 디자인 패턴을 말한다

##############################################################

# 구현 사전준비
1. 프론트 영역
1) 웰컴페이지 생성 : index.jsp
2) 필요한 jar 파일 불러오기
(1) mybatis.jar : mybatis 사용
(2) lombok : actionforward 클래스, 그
(3) taglib : 코어 라이브러리, jstl 사용목적

3) sql폴더 및 sql파일생성
- dto의 변수와 동일한 칼럼 작성
4) jsp 페이지 폴더 생성
5) assets 폴더 생성 : 정적 데이터 보관
- 제이쿼리 가져오기

======================================================

2. 백엔드 영역
(1) mybatis -------------------------------------------------------------------------------
# mybatis 폴더 config, mapper 폴더 생성
#) 1 config
- (1) mybatis.config : mybatis 설정.xml 문서 작성 
- (2) db.properties   : 참고할 db정보 생성(텍스트파일)

#) 2 mapper 폴더 생성
- sql문을 작성할 xml파일 생성

--------------------------------------------------------------------------------------------- 
(2) common : ActionForward 클래스
- 용도 : 이동경로(리다이렉트, 포워드) 반환용 클래스
- 조건 : 롬복(setter, getter)
--------------------------------------------------------------------------------------------- 

(3) domain : dto
- 용도 : 계층간 이동용 클래스
- 조건 : 롬복(view,디폴트생성자,매개변수생성자,빌더)
--------------------------------------------------------------------------------------------- 
(3) controller
- 생성 : 서블릿파일
- 기능 : 서비스 요청을 제일먼저 받아서 해당 요청을 호출해서 처리
- 조건 : 하나의 서블릿에서 복수의 요청을 처리하기 위해서 웹서블릿 어노테이션을 *.do(임의의명칭) 처리
- 구성
(1) 요청, 응답 인코딩 처리
(2) urlmapping값 획득 : getRequestURI()와 getContextPath()를 이욯(둘다 request의 메서드)
(3) ActionForward, 서비스 인터페이스 선언 : null값 부여
(4) swtich문 : 요청받은 서비스 조회
(5) 서비스 실행을 위한 try-catch문
(6) 이동 : actionforward 객체에 저장된 이동경로로 리다이렉트, 또는 포워드 이동
--------------------------------------------------------------------------------------------- 

(4) repository : dvo 클래스
- 싱글턴 패턴 적용
- sqlsessionfactory 인터페이스로 sqlsession 객체 생성

--------------------------------------------------------------------------------------------- 
(5) service
- 서비스 인터페이스 : 모든 서비스의 공통 인터페이스 생성
======================================================

# crud 구현

1. index.jsp => list.jsp
- 상황 : 웰컴페이지에서 게시판 목록으로 이동
- 유형 : 비즈니스로직(모든 boards를 반환)

2. list.jsp => detail.jsp
- 상황 : 게시판 목록에서 파라미터로 전달된 board.no에 따른 상세창 이동
- 유형 비즈니스 로직(게시판 번호를 파라미터로 전달해서 해당 board반환)

3. list.jsp => write.jsp
- 상황 : 게시판 목록에서 게시글 추가로 이동
- 유형 : 단순이동(가져올게 없음, 단순 추가화면으로의 이동)

4. write.jsp => add.do
- 상황 : 추가화면에서 insert
- 유형 : 비즈니스로직(db에 접근해서 새로운 게시글 추가)
- 특징 
(1) 파라미터로 전달, int 반환
(2) 번호(시퀸스)의 경우 새롭게 부여하는 역할은 쿼리문에서 실시한다

5. detail.jsp => edit.jsp
- 상황 : 상세화면에서 편집화면으로 이동
- 유형 : 비즈니스 로직(게시글 번호를 파라미터로 전달해서 해당 board를 반환)
* detail.do와 서비스코드가 동일하다

* 편집은 게시글 번호를 파라미터로 수정요청을 해야하기 때문에,
boardNo를 가져올 수 있는 상세보기 창에서 요청하는게 자연스럽다

6. edit.jsp => modify.do 
- 상황 : 편집화면에서 수정요청
- 특징
(1) 파라미터로 전달받은 게시글 번호를 그대로 다시 전송해야한다
- 이유 : 그렇지 않으면 쿼리문에서 새로운 번호를 부여해야 하기 때문
=> 해결 : 편집화면에서 input type=hidden 태그를 통해서 name 속성으로 게시글번호를 전달한다
(2) 수정된 상세보기 화면으로 돌아온다

2) detail.jsp => remove.do
- 상황 : 편집화면에서 삭제요청
- 유형 : 비즈니스로직
- 특징 
(1) boardNo를 파라미터로 전달하여 db에 접근
(2) 결과를 보여줄 필요가 없기 때문에 별도의 jsp페이지가 없고, 게시글 목록으로 돌아간다




















