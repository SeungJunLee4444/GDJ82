[서블릿]
1. 개념
- 정의 : 클라이언트의 요청에 따라 동적 서비스를 제공하는 '자바' 클래스
=> 요청을 받으면 동적 페이지를 제공
=> 동적페이지 : 요청에 따라 다른 페이지를 제공받는것

- 특징
(1) 서버쪽에서 실행되어 요청에 따른 기능을 수행하고, 웹 브라이저에 결과를 전송
=> 안정성이 높음
(2) 톰캣같은 JSP/SERVLET 컨테이너(=웹 에플리케이션 서버, WAS)에서 실행됨
(3) 자바 클래스 내부에 HTML 문서를 만들어서 클라이언트에게 응답

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
& 톰캣
- 정의 : JAVA 기반 서블릿 컨테이너, 웹 에플리케이션 서버(WAS), 웹서버(WS)
- 용도 :
(1) 서블릿 실행에 필요
(2) JSP, SPRING 을 이용한 웹 사이트 구축에 필수
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

- 구조
(1) 자바(서블릿)  : 백엔드
(2) HTML(웹서버): 프론트엔드
=====================================================


2. HttpServlet 클래스
1) 정의 : 사용자 요청인 HttpServletRequest 클래스, 사용자 응답인 HttpServletResponse의 슈퍼클래스
2) 클래스 내 주요 메서드
(1) doGet	 : GET 요청 처리
(2) doPost : POST 요청 처리
그외) init, delete, service도 있음

3) Servlet 생명 주기
(1) 객체 생성 : 요청이 오면, Servlet 클래스 로딩, 요청에 대한 Servlet 객체 생성
(2) 초기화 : init메서드로 Servlet을 초기화
(3) 메서드 호출 : service() 메서드를 호출해서 서블릿이 브라우저의 요청을 처리
	        service() 메서드는 HTTP요청에 따라 doGET, doPOST 메서드를 호출	
(4) 서블릿 제거 : destroy() 메서드 호출

&&&&&&&&&&&&&&&&&&&&&&&&&
& 톰캣의 Servlet 관리
- 이미 생성된 Servlet 객체는 메모리에 남겨둠
=> 자원을 효과적으로 처리
&&&&&&&&&&&&&&&&&&&&&&&&&

=====================================================

3. 브라우저에서 Servlet 호출
1) 개념
- 기능 : 서블릿의 이름, 또는 서블릿의 별명을 통해 브라우저에서 서블릿을 호출할 수 있다
- 방법 : 브라우저에서 호출할 서블릿의 URLMapping값을 포함한 주소를 입력한다

2) url의 형식
프로토콜://호스트:포트번호/ContextPath/URLMapping
(1) 포트번호 : 생략가능, 기본값은 8080, 충돌 발생시 Tomcat 포트번호를 수정해서 사용
(2) ContextPath	: 기본적으로 프로젝트명과 동일
(3) URLMapping	: 기본적으로 서블릿 이름과 동일

& urlmapping은 기본적으로 서블릿 이름과 같지만 다른이름으로 수정할 수 있음

3) urlMapping 변경
(1) Servlet 클래스에서 @WebServlet 에너테이션 등록하기	=> 1번을 적극 사용
(2) web.xml 파일에 <servlet> 태그 등록			=> 사용x (방법은 ppt참고)

4) ContextPath
- 정의 : WAS에서 웹 에플리케이션을 구분하기 위한 경로
- 변경방법 : 프로젝트 - preperties, web project settings에서 변경가능 	=> 사용x
=> 그냥 프로젝트 이름을 변경하면 바꿀수있다			=> 이 방법을 사용

=====================================================

4. 요청과 응답
1) HttpServletRequest
- 정의 : 클라이언트의 요청 정보를 처리하는 클래스
- 객체생성 : 톰캣이 웹 브라우저에서 서블릿 요청을 받으면 httpservletrequest 객체 생성
- 용도 : http 프로토콜의 request 정보를 서블릿에게 전달하기 위한 클래스

- 메서드
ex) 경로 http://localhost:8080/project/list.jsp
*********************************
(1) getContextPath() 	: 컨텍스트값 uri 반환						// /project 
(2) Cookie[], getCookies()		: 클라이언트가 요청과 함께보낸 쿠키값을 배열로 반환
(3) String, getRequestURI()		: 요청한 url의 컨텍스트와 파일경로(mapping, 파일경로)까지 반환	//  /project/list.jsp  
(4) String, getParameter()		: 요청에 포함된 파라미터값을 문자열로 반환
(5) String, getParameterValues()	: 요청에 포함된 파라미터값을 문자열로 반환
*********************************
(6) HttpSession, getSession()		: 현재 요청과 연관된 session을 반환
(7) String getHeader

&&&&&&&&&&&&&&&&&

&&&&&&&&&&&&&&&&&

2) HttpServletResponse
- 정의 : 서버의 응답 정보를 처리하는 클래스
- 기능 : 응답을 위한 출력스트림 추출, 응답할 주소 처리, 응답할 데이터 타입이나 문자셋 설정
- 메서드
*********************************
(1) PrintWriter getWriter()	: 서버에서 클라이언트(웹 브라우저)로 문자를 전송할 수 있는 출력스트림 반환
(2) sendRedirect(String)	: 클라이언트에게 리다이렉트할 url 전송
*********************************
(3) setContentType(String)	: 응답정보의 데이터 형식
(4) addCookie(Cookie)	: 응답정보에 쿠키를 추가
(5) addHeader(String, String)	: 응답정보에 헤더값을 저장
(6) setstatus(int sc)		: 응답정보에 상태코드를 저장


=====================================================

5. 이동방법
1) Redirect
(1) 개념
- 정의 : 기존 request를 유지하지 않는 이동방식, 
* 정의 : 페이지 이동의 주체가 클라이언트며, 클라이언트에게 새로운 이동장소를 알려주는 방법
- 용도 : db가 변경되는 작업(insert, update, delete 이후에는 redirect를 사용)

(2) 경로
- 형태 : response.sendRedirect(String경로)
=> 이동할 경로는 contextPath를 포함한 전체 경로를 작성
ex) /01_Servlet/RedirectServlet2
* 클라이언트가 이동하기 떄문에 url을 통해 redirect 경로 확인이 가능함
ex) 서블릿 1에서 서블릿 2로 이동 => 결과 : 서블릿 2 url이 클라이언트에게서 확인 가능

2) Forward
(1) 개념
- 정의 : 기존 request를 유지하는 이동방식
* 정의 : 페이지 이동의 주체가 서버며, 클라이언트가 새로운 이동장소로 이동할 필요가 없음
=> 기존의 url 경로를 유지한채 요청한 값을 응답받게됨
- 용도 : db변경이 없는 작업이나 단순 이동인 경우 forward

(2) 경로
- 형태 : request.getRequestDispatcher(이동경로).forward(request.response)
=> 이동경로는 contextPath를 제외하고 서버 내부경로만 작성해야함
ex) /ForwardServlet2

- 서버 내부에서 이동하기 때문에 클라이언트는 url을 통해 forward한 경로를 확인할 수 없음
* 서버에서 이동이 이루어지기 때문에 url을 통해 forward 경로 확인이 불가능함
ex) 서블릿 1에서 서블릿 2로 이동 => 결과 : 서블릿 1 url이 클라이언트에게서 유지된 채로 새로운 페이지로 이동


=====================================================

6. 쿠키
- 정의 : 클라이언트 pc에 저장되는 정보
- 용도 : 웹 페이지에서 참조해야하는 공유정보를 저장해두고 사용하기 위해 쿠키를 사용
- 용량 : 4kb 용량 제한
- 특징 
(1) 보안에 취약
(2) 웹 브라우저에서 사용유무 설정 가능
(3) 웹 사이트당 하나의 쿠키가 생성됨
- 쿠키 확인하는 법 : 개발자도구 - application - cookies

-------------------------------------------------------------------------------------------------

2) 쿠키 저장
(1) 생성 : 쿠키는 서버에서 만든다
- 쿠키 생성 :  Cookie cookie = new Cookie("name", "가나다");
(2) 전달 : 서버가 만든 쿠키를 응답에 저장하여 클라이언트에게 전달, 클라이언트 pc에 저장
- 응답에 쿠키정보 저장 : response.addCookies()

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
& 쿠키는 유효시간 설정이 가능하다
ex) 
cookie1.setMaxAge(15*24*60*60);	// 15일후 x
cookie2.setMaxAge(10);		// 10초후 x
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

-------------------------------------------------------------------------------------------------

3) 쿠키 확인
(1) 생성 : 쿠키는 클라이언트에게 저장되있으며, 요청시 클라이언트가 가진 모든 쿠키를 배열형태로 가져오게된다
- 클라이언트의 모든 쿠키 요청 :  Cookie[] cookies = request.getCookies();

(2) 확인 : 쿠키의 key값과 서버측의 key값이 동일한지 비교한다
* getName : 키값, getValue : 속성값
=> 서버에서 해당 쿠키의 고유아이디값을 대조하여 일치하는 쿠키 여부를 확인


=====================================================

7. Session
1) 개념
- 정의 : 서버 메모리에 저장되는 정보
- 특징 
(1) 보안에 유리함
(2) 브라우저 당 하나의 세션이 생성된다(세션ID를 통해 각 세션을 구분)
(3) 유효시간을 지님
- 용도 : 로그인, 장바구니 등에 사용

& 쿠키와 세션의 차이
1) 쿠키는 클라이언트에 저장되는 정보
2) 세션은 서버에 저장되는 정보
=> 세션이 보안에 유리
=> 둘다 사이트당 하나의 쿠키와 세션이 생성된다

2) 세션 실행과정
(1) 브라우저로 특정 사이트에 접속
(2) 접속한 브라우저의 세션 객체 생성
(3) 생성된 세션 객체의 ID를 브라우저에 응답
(4) 브라우저는 서버로부터 받은 세션ID를 세션 쿠키형태로 저장

3) 세션 생성 
- 정의 : HttpSession 클래스의 객체
- 방법 :  HttpServletRequest 클래스 객체의 getSession() 메서드를 호출해 생성
- 생성메서드
(1) httpsession, getSession()		: 기존의 세션 객체가 존재하면 해당 세션객체를 반환, 없으면 새로 생성한 객체를 반환
(2) httpsession, getSession(boolean arg)	: true면 세션객체가 없으면 새로운 생성객체 반환, false면 세션객체가 없으면 null반환

- 그외 메서드
(3) void, invalidate() 	: 현재 생성된 세션 소멸
(4) long, getCreateTime()	: 세션이 생성된 타임스탬프값 반환
(5) String getId()		: 세션에 할당된 고유 식별자 반환

=====================================================

8. 서블릿 속성
- 용도 : 웹 프로그램 실행 시 데이터를 서블릿 관련 객체에 저장하는 방법
- 속성에 저장해둔 데이터를 서블릿이나 jsp가 공유해서 사용가능

- 속성 메서드
(1) void, setAttribute(String name, Object obj)   : 지정한 name 속성으로 obj 저장
(2) Object, getAttribute(String name)		: 지정한 name 속성의 값을 반환(object를 반환하기 때문에 캐스팅이 필요)
(3) void, removeAttribute(String name)	: 지정한 name 속성 삭제


=====================================================

9. 스코프
- 정의 : 서블릿 속성에 접근할 수 있는 접근범위를 의미
* 스코프가 다르면 속성에 접근하여 저장된 데이터를 얻을 수 없다
(1) 애플리케이션 스코프, ServletContext : 동일한 애플리케이션에서 접근가능(총방문자수, 서버가 없어질때까지)
(2) 세션 스코프, HttpSession		 : 동일한 브라우저에서 접근가능(로그인정보, 장바구니정보, 하나의 사이트 내) 
(3) 리퀘스트 스코프, HttpServletRequest: 하나의 요청/응답 사이클에서만 접근가능

- 특징
(1) 동일한 이름의 속성을 서로 다른 스코프에 저장할 수 있다
(2) 동일한 이름의 속성인 경우 리퀘스트 > 세션 > 애플리케이션 스코프의 우선순위를 지닌다

& 해당 스코프에 따라 정보가 저정되는 범위(기간)이 다르기때문에,
접근하고자 하는 정보를 얻을때 주의가 필요하다


