
& 15일차	:	컬렉션 프레임워크

& 요약
* 데이터 저장을 위해 컬렉션을 사용
* list, map 추가하는 법, 제거하는법, 수정하는법, for문 활용





1. 프레임 워크의 구조
=> 인터페이스와 구현클래스로 나뉜다

<인터페이스>
collection(인터페이스)		|	Map<K,V>
=> set, list, queue(자식 인터페이스)	|	=> 맵핑, KEY와 VALUE로 구성된 하나의 데이터를 여러개 관리
					
<구현클래스>
set(부모) 		- hashset(자식)	|	HashMap<K,V>, TreeMap<K, V>
list(부모))		- arraylist, vector	|
list.queue(부모)	- linkedlist	|

* 입력타입
1) Generic	: 구체화라고 하며, 생성할 때 데이터 타입을 결정짓는 것을 말한다
=> ex) List<String> list = new Arraylist<String>();
=> 배열의 타입을 String 타입으로 고정
2) Wrapper	: 기본타입이 필요할 때, wrapper 클래스를 참조한다
=> Integer, Long, Byte, Character, Boolean, Float, Double

-----------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------

3. List 인터페이스 각종 메서드
1) 생성
ex) List<String> list = new ArrayList<String>();
=> list(인터페이스) + arraylist(자식클래스)

2) 요소 추가(add)
(1) 인덱스 지정없이 순서대로 저장
=> list.add("월");
(2) 인덱스 지정 후 저장
list.add(0, "일");

* 결과	: [일, 월]
=> 인덱스값에 따라 기존에 입력된 내용은 뒤로 밀리게된다

3) 요소 삭제(remove)
1) 문자열을 입력해 제거
ex) boolean result = list.remove("일");
=> true, false 값으로 반환
2) 해당 index 위치의 요소 제거
=> list.remove(2);

* 프레임워크에서 배열요소를 삭제하면 자동으로 앞당겨진다
* 

4) 요소 제거 + 제거한 내용 확인
ex) String removeItem = list.remove(0);
=> 삭제한 값을 문자열에 저장
System.out.println(removeItem);

5) 요소 수정(set) ************************************************************************
=> ex) list.set(0,"일")

6) 리스트 초기화(arrays.aslist)
ex) List<String> list = Arrays.asList("일", "월", "화", "수");
* as list가 list를 반환하려들면, 기존의 list의 배열길이로 고정된다
=> 안에 내용은 수정가능

7) 리스트 길이(size)
ex) int size = list.size();
System.out.println(size);

8) 개별요소 확인(get)
ex) String element = list.get(0);
System.out.println(element);

9) for문으로 배열정보 순회 **************************************************************
(1) 기존
for(int i = 0; i < list.size(); i++) {
System.out.println(list.get(i));
}

(2) 개선	: size 메서드가 4번 반복되는걸, list.size 메서드가 1번만 작동하도록 개선 ******	
for(int i = 0, length = list.size(); i < length; i++) {
System.out.println(list.get(i));
}
=> 초기값에 길이 메서드를 부여

(3) 향상 for문
for(String element : list) {
System.out.println(element);
}

10) 비어있는 리스트 확인(isEmpty)
ex) boolean result = list.isEmpty();
System.out.println(result);

11) 특정요소 포함
ex) if(list.contains(4)) {
	System.out.println("4를 포함한다");
} else {
	System.out.println("4를 포함하지 않는다");
}

-----------------------------------------------------------------------------------------

4. set 인터페이스
* set은 순서 없게 저장되어, index가 의미없기 때문에,
 index가 사용되는 메서드를 활용할 수 없다
* 중복저장 불가능
=> 필더링에 사용가능

1) 생성
ex) Set<String> set = new HashSet<String>();
=> hashset 생성자 사용

2) 요소추가
(1) 중복 불가능
set.add("수");
set.add("수");
=> [수]

(2) 순서없이 저장(인덱스가없다)
set.add("일");
set.add("월");
set.add("화");
set.add("수");
set.add("수");
=> [월, 화, 수, 일]

3) 요소제거(다름)
* index가 없기 때문에 문자열 삭제만 가능
ex) set.remove("일");

4) set 초기화(hashset사용)
ex) Set<String> set = new HashSet<String>(Arrays.asList("일", "월", "화", "수"));
=> 리스트를 세트로 변환하는 방식으로 초기화

5) set의 길이(동일)
ex) int size = set.size();

6) 향상 for문(다름)
ex) for(String element : set) {
	System.out.println(element);
}
* index가 없으니 일반 for문 사용x

7) 집합
(1) 교집합(retain)
ex) set1.retainAll(set2);
(2) 합집합(addAll)	
ex) set1.addAll(set2);
=> (set1은 set2를 전부 더한값)
(3) 차집합(removeAll)
ex) set1.removeAll(set2);	
=> 겹치는 부분을 제외한 집합을 말한다(set1은 set2를 전부 제외한값)
(4) 부분집합(containAll)
* 부분집합인지 아닌지, 참 거짓여부를 반환함
ex) boolean result = set1.containsAll(set2);
=> set2는 set1의 부분집합인지?

8) 중복여부 필터링에 사용
=> set이 중복된 값을 저장 못하는 특성을 이용
* 방법: list를 set에 저장하고 다시 list에 저장

(1) list 인터페이스로 배열만들기
List<String> list = new ArrayList<String>();
list.add("일");
list.add("월");
list.add("화");
list.add("화");

일월화수
일월화수수

(2) set에 저장후, list 특성 지우기(순서있게, 중복가능)
Set<String> set = new HashSet<String>(list);

		
list.clear();
* list의 모든 요소을 지운다

(3) set을 다시 list에 저장
list = new ArrayList<String>(set);

-----------------------------------------------------------------------------------------

5. Hashcode
=> 많은 데이터에서 빠른 조회를 위해 사용되는 코드
=> 공통된 해시코드 수를 비교하고, 같은 해시코드를 지닌 코드끼리 동등비교

ex) System.out.println(book.hashCode());
=> 10진수의 주소값이 출력되는것이 특징이다

1) equals
=> 기본적으로 문자열과 문자열이 같은지 비교하는 메서드다
=> 객체와 객체를 비교할 때는, 참조하는 주소값을 비교하기 때문에,
같은 내용의 객체라도 다르게 인식한다
=> equals를 오버라이징하여 해결하면 된다(문자열이 같으면 주소값이 같아진다)

2) hashcode
=> 객체의 주소값과 같다
=> 코드에서 hashcode를 사용하면, hashcode 메서드를 오버라이징하여 해결한다
* 문자열이 같으면 주소값이 같도록 만들어준다
=> set은 중복을 하지 않기 때문에, 중복값이 출력되지않게된다


-----------------------------------------------------------------------------------------

6. Map<k, v>
* list와 set과 달리 {}로 묶여있음

1) 생성
Map<String, String> dictionary = new HashMap<String, String>();
* key, value 모두 string타입이다

2) 추가, 수정(add)
=> 새로운 key값을 사용하면 추가
=> 기존의 key값을 사용하면 수정
dictionary.put("apple", "사과");
dictionary.put("banana", "바나나");
dictionary.put("tomato", "토마토");
dictionary.put("mango", "망고");
dictionary.put("melon", "멜론");
System.out.println(dictionary);
dictionary.put("melon", "메론");

3) 삭제(remove)
=> 삭제할 요소의 key값을 전달하면 삭제됨
=> 삭제된 value가 반환됨
String removeItem = dictionary.remove("tomato");
System.out.println(removeItem);
=> key값인 "tomato"를 삭제하면, 삭제된 정보는 "토마토"가 나온다

4) value값 확인(get)
ex) System.out.println(dictionary.get("apple"));
=> "사과"
System.out.println(dictionary.get("peach"));
=> 없는걸 치면 null값이 나온다

5) 기본타입 저장하는법
(1) value를 string으로 관리
Map<String, String> map1 = new HashMap<String, String>();
map1.put("price", 10000 + "");



(2) value를 object로 관리
Map<String, Object> map2 = new HashMap<String, Object>();
map2.put("price", 20000);
=> object 

6) for 
* key, value를 합쳐서 entry라 한다
ex) 
Map<String, Object> map = new HashMap<String, Object>();
* object는 모든 값을 받을 수 있다


(1) entry를 이용한 for
for(Map.Entry<String, Object> entry : map.entrySet()) {
	System.out.println(entry.getKey() + ":" + entry.getValue());
}
		
(2) key를 이용한 for
for(String key : map.keySet()) {
	System.out.println(key + ":" + map.get(key));
}

7) list안에 map을 넣어 for 2중문
Map<String, Object> map1 = new HashMap<String, Object>();
	map1.put("title", "소나기");
	map1.put("author", "황순원");
	map1.put("price", 5000);
		
Map<String, Object> map2 = new HashMap<String, Object>();
	map2.put("title", "어린왕자");
	map2.put("author", "생택쥐베리");
	map2.put("price", 10000);
		
Map<String, Object> map3 = new HashMap<String, Object>();
	map3.put("title", "홍길동전");
	map3.put("author", "허균");
	map3.put("price", 30000);

List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		list.add(map1);
		list.add(map2);
		list.add(map3);

for(Map<String, Object> map : list) {
	for(Map.Entry<String, Object> entry : map.entrySet()) {
		System.out.println(entry.getKey() + ":" + entry.getValue());
	}
	System.out.println();
	* list안에 map이 저장된 타입(실무에서 자주 볼 수 있음)
}
=> 첫번째 for	: list 배열 안의 map들 반복 
=> 두번째 for	: map안 entry 반복




=========================================================


& 기타
1) 
* (String a) => String이 a뿐이다
* (String ...) => String이 여러개 들어갈 수 있음(갯수제한x)	

2) Object클래스의 equals 메서드
=> 기본적으로 object의 equals은 내용이 아닌 참조값을 비교한다
=> 객체들의 내용이 같은지를 비교하기 위해서는
equals의 오버라이드가 꼭 필요하다(자동생성가능)
ex)
Book book1 = new Book(1, "어린왕자", "생택쥐베리");
Book book2 = new Book(1, "어린왕자", "생택쥐베리");
System.out.println(book1.equals(book2)); 
=> equals가 있으면 true, 아니면 false
* 객체의 내용을 비교할때는 override equals가 꼭 필요하다
* object의 메서드:	equals, tostring

3) 배열을 사용해 배열의 길이 늘리는법
=> 늘리려는 길이의 배열을 새로 만든 후, arraycopy를 사용해 붙이기
ex) arraycopy(배열, 0, 배열, 0, 배열의 길이)

4) has_a 관계
=> 상속관계가 아니다
=> 즉, 상속관계처럼 생성자가 상속되지 않는다

5) 출력시 한자리 숫자와 두자리 숫자의 보폭 맞추기 및 정렬
for(int i = 0; i < seats.length; i++) {
	if(seats[i].isOccupied()) {
		System.out.println(seats[i].getName().substring(0, 1));
	} else {
	System.out.println((i + 1) + (i < 9 ? "  " : " "));	// * 한글자일때는 두칸벌리기, 두글짜일때는 한칸 벌리기
	}														// => 한글자 두글자 보폭맞추기
	if((i + 1) % 10 == 0) {
		System.out.println();	// => 10줄마다 줄바꿈
	}
} System.out.println();

=> 
[A]
1  2  3  4  5  6  7  8  9  10 
11 12 13 14 15 16 17 18 19 20 
21 22 23 24 25 26 27 28 29 30 
31 32 33 34 35 36 37 38 39 40 
				=> 맨 마지막 코드 띄어쓰기
[R]
1  2  3  4  5  6  7  8  9  10 
11 12 13 14 15 16 17 18 19 20 
21 22 23 24 25 26 27 28 29 30 






