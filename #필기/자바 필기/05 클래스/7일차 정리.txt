[1] 클래스

1. 클래스 정의
1) 클래스 : 특정한 필드(속성)을 담고있는 영역
2) 필드	: 클래스에 담긴 속성들
=> 클래스 안에 선언된 변수들을 필드라 부른다 *
3) 객체	: 클래스의 속성들을 사용하기 위해 붙인 임의적인 클래스명 
=> 같은 클래스에서 다른 속성이나 메소드를 참조하기 때문에,
객체명은 임의로 다르게 짓게된다 *

* 객체로 필드를 호출하는 값은, 필드의 데이터타입으로 반환된다 *
* 필드는 배열처럼 초기값이 자동으로 초기화된다
=> string은 null, int는 0, boolean은 false

---------------------------------------------------------------------------------

2. 클래스 사용법
1) 클래스 선언, 생성
ex) 
User user = new User();
2) 필드 생성


3) 필드값 변경
user.id = "admin";					
user.pw = "123456";
user.email = "admin@web.com";
user.point = 1000;					
user.isVip = (user.point >= 10000);

3) 출력
System.out.println(user.id);
System.out.println(user.pw);
System.out.println(user.email);
System.out.println(user.point);
System.out.println(user.isVip);


---------------------------------------------------------------------------------
---------------------------------------------------------------------------------

[2] 메소드
1. 메소드 정의
1) 메소드 : 클래스 내부에 포함된 함수를 메소드라고 한다

2) 형태
ex)
int add(int a, int b) {			
	int result = a + b;			
	return result;				
}
=> int		: 반환 타입 ex) add 메소드를 실행하면, int타입 값을 반환
=> add		: 메소드명  => 임의로 짓는 명칭 
=> (int a, int b)	: 매개변수  ex) add 메소드를 호출하면, int타입 값 2개가 전달되어야 한다는 뜻
		* 일종의 메소드 호출 조건

3) 메소드 사용법
(1) 메소드를 담은 클래스 형성과 메소드 작성
ex) => double 타입 나누기 메소드, int a, b 매개변수
double div(int a, int b) {		
	double result = (double)a / b;
	return result;
}

(2) 메소드 호출
{1} 객체 생성
Calculator calculator = new Calculator();
{2} 메소드 호출
double answer = calculator.add(10, 5);
=> 값을 담으려는 데이터 타입과, 반환하는 메소드의 타입은 같아야 한다 **
{3} 출력
=> System.out.println(answer);

* return 
=> 메소드에서 반환하려는 값의 형태(출력문같은 역할)
* voild 반환타입은 return 값이 없다
* return은 (1) 메소드에서 사용하는 반환값과 (2)조건반복문 탈출용이 있다


---------------------------------------------------------------------------------
---------------------------------------------------------------------------------

[3] 연습문제

* return
* void  => 반환값이 없는 데이터 타입

* 메소드 오버로딩
ex) 
int add(int a, int b) {
	return a + b;
}

int add(int a, int b, int c) {
	return a + b + c;
}
	
int add(int a, int b, int c, int d) {
	return a + b + c + d;
}
		
int add(int[] arr) {   // *
	int total = 0;
	for(int n : arr) {
	total += n;
}	
return total;

=> 같은 메소드명과 다른 매개변수를 가지면 오버로딩된다
=> 반환타입이 달라도 상관없다 *


// 연습1

1) vendingmachine 클래스
// 커피뽑기
// 한잔 1000원
// 종류(1) 아메리카노, (2)까페라떼
// 아메리카노 한잔, 까페라떼 두잔 출력하기
String getcoffee(int money, int button) {
		
String[] menu = {" ", "아메리카노", "까페라떼"};

return menu[button] + (money / 1000) + "잔";
// * return : 반환하려는 값의 형태

2) vendingmachinemain 클래스
VendingMachine machine = new VendingMachine();
		
String coffee1 = machine.getcoffee(1000, 1);	// 아메리카노 1잔
String coffee2 = machine.getcoffee(2000, 2);	// 까페라떼 2잔
		
System.out.println(coffee1);
System.out.println(coffee2);	



// 연습 2 자동차로 필드, 메소드 동시에 활용하기
	
1) car 클래스
	// 자동차 = 기름, 속도,  

	// 1) 필드
	int oil;
	int speed;
	
	// 2) 메소드
	// (1) 기름넣기
	// 반환타입		: void		// 반환값이 없는 타입 *
	// 메소드 이름	: addoil
	// 매개변수		: int o
	void addoil(int o) {
		oil += o;
		if(o > 60) {
			oil = 60; 			// => 60이 한계치임을 처음부터 정함 *
		}
	}
		
	
	
	
	// (2) 달리기
	// 반환타입 : void
	// 메소드 이름 : pushAccel 
	// 매개변수 : X
	void pushAccel() {
		// 예시
		// 액셀 한번 밟으면 속도는 25씩 증가, 최대 120제한
		// 기름은 1씩 사용
		
		// * 특정상황에 애초에 식이 진행될 필요가 없는 경우를 구상
		// {1} 예외 1기름이 애초에 0일때
		if(oil == 0) {
			return;				// => 반환타입이 void일때만 가능
			}					// * return 강제중지
		
		// {2} 예외2 경우의수2
		if(speed == 120) {
			oil--;
			return;
		// 애초에 속도가 120이면 가속할 필요가없음
		
		}
	
		// {3} 경우의수3 일반적으로 가속할 때
		speed += 25;
		if(speed > 120) {
			speed = 120;
		}
		oil--;
	}
		
		// * 액셀을 5번 밟으면 125만큼 늘어나는 것이 아니라 120을 유지
		// {2} 공식이 없으면 속도가 
		
	
	
	// (3) 멈추기
		void PushBrake() {
			
			// * 브레이크를 애초에 밟을 필요가 없는 순간
			// {1} 예외1 애초에 기름이 0일떄 
			if(oil == 0) {
				return;				
				}	
			
			// {2} 예외2 애초에 속도가 0이면 작동할필요x
			if(speed == 0) {
				//oil--;
				return;
			}
			
			// {3} 정상작동 속도를 0까지 줄임
			speed -= 25;
			if(speed < 0) {
				speed = 0;
			}
			oil--;

		}
		
	// (4) 계기판 (기름, 속도) 확인
		// 반환타입 : void
		// 메소드명 : panel
		// 매개변수 : x
		
	void panel() {						// => 자동 실행창을 메소드로
		System.out.println("기름" + oil);
		System.out.println("속도" + speed);
	}
}
		

2) carmain 클래스		
		
		// 1) 객체생성
		Car car = new Car();
		
		car.addoil(50);
		car.addoil(5);
		car.addoil(100);
		System.out.println(car.oil);
		
		
		car.pushAccel(); // 엑셀 한번? * 
		car.pushAccel();
		
		System.out.println("기름" + car.oil); // 58
		System.out.println("속도" + car.speed); // 50 (액셀 두번밟음)

		
		car.PushBrake();
		car.PushBrake();
		car.PushBrake();
		
		car.panel();
		





















