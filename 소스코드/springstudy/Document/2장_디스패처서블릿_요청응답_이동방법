[ 2장 : 디스패처 서블릿, 요청응답과 포워드, 리다이렉트 ]

====================================================================================================
<프로젝트 2 : 개념>

[[[ DispatcherServlet -------------------------------------------------------------------------------
- 정의 : 상위 컨트롤러, 요청을 제일 먼저 받는 영역 
- 기능 : 요청을 처리할 컨트롤러가 복수 존재하는데, 여기서 필요한 컨트롤러를 HandlerMapping이 호출한다
- 형태 : servlet.context.xml 

# 기능 
(1) 정적자원 관리 : 정적자원을 관리하는 폴더의 경로 등록
(2) viewResolver : 응답할 뷰의 전체정보를 완성시켜준다
- prefix에 뷰의 경로를, suffix에 .jsp를 붙여줌
- prifix에서 jsp 페이지의 경로를 설정할 수 있다 ---- *
* 현재는 WEB-INF폴더 아래의 VIEWS 아래로 설정해놓았다
(3) Component scan : @Component 사용시 @Bean으로 등록되는 루트 패키지 경로를 설정


[[[ 스프링 컨트롤러 ----------------------------------------------------------------------------------
- 방법 : @Controller 어노테이션 사용  
- 특징 : 선언시 자동으로 @Bean으로 만들어진다, @Component의 일종



[[ 요청과 응답 : 컨트롤러에서 내부의 메서드 하나당 요청 1개와 응답 1개를 처리한다 --------------------
# 요청
- 반환타입 : String, 이유 : 응답할 뷰(jsp)의 이름을 반환하기 때문
- 메서드 이름 : 맘대로 작성
- 매개변수 : HttpServletRequest, HttpServletResponse, Model
* 스프링에서는 request 대신 Model에 속성저장을 사용한다(request의 기능 + 보안)

# 응답
- 반환타입 : void



[[ 웰컴페이지 이동하는법 + 단순 페이지 이동 ----------------------------------------------------------
- 경로작성 : 컨트롤러의 return에 경로를 작성
- 방법 : 포워드

# 포워드와 리다이렉트
- 포워드 : 단순이동, 반환시 return("경로"), jsp 경로를 반환
- 리다이렉트 : 서비스 요청, 반환시 return("redirect:/urimapping"), 새로운 요청을 반환


================================================================================================
<프로젝트 2 : 목록>


================================================================================================
<프로젝트 2 : 추가>











