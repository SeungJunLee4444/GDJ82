<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gdu.app11.mapper.EmpMapper">

	<!--  # employees와 departments의 조인을 위한 resultMap을 사용한다 -->
	<resultMap type="DeptDTO" id="DeptMap">
		<result column="DEPARTMENT_ID" property="departmentId"></result>
		<result column="DEPARTMENT_NAME" property="departmentName"></result>
		<result column="MANAGER_ID" property="managerId"></result>
		<result column="LOCATION_ID" property="locationId"></result>
	</resultMap>
	<resultMap type="EmpDTO" id="EmpMap">
		<result column="EMPLOYEE_ID" property="employeeId"></result>
		<result column="FIRST_NAME" property="firstName"></result>
		<result column="LAST_NAME" property="lastName"></result>
		<result column="EMAIL" property="email"></result>
		<result column="PHONE_NUMBER" property="phoneNumber"></result>
		<result column="HIRE_DATE" property="hireDate"></result>
		<result column="JOB_ID" property="jobId"></result>
		<result column="COMMISSION_PCT" property="commissionPct"></result>
		<result column="SALARY" property="salary"></result>
		<result column="MANAGER_ID" property="managerId"></result>
		<collection resultMap="DeptMap" property="deptDTO"></collection>
		<!-- * resultMap = DeptDTO의 id, property = deptDTO(EmpDTO의 필드값 deptDTO) * -->
	</resultMap>



 	<!--  # totalRecord 전체 게시글 수 구하기 -->
 	<select id="selectAllEmployeesCount" resultType="int">
		SELECT COUNT(*)
		  FROM EMPLOYEES
	</select>
 	
 	<!--  # 페이지당 게시글 조회 : parameterType 생략-->
 	<!--  - 상황 : 입사순으로 정렬(A), ROWNUM을 붙이고(B), 11-20가져오기(임의)-->
 	<!-- * parameterType : map은 소문자든 대문자든 상관없다  -->
 	
 	<select id="selectEmployeesByPage" parameterType="Map" resultMap="EmpMap">
		SELECT B.*
		  FROM (SELECT ROWNUM AS RN, A.*
		          FROM (SELECT E.*, D.DEPARTMENT_NAME, D.LOCATION_ID
		                  FROM DEPARTMENTS D RIGHT JOIN EMPLOYEES E
		                    ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
		                  ORDER BY HIRE_DATE DESC) A) B
		 WHERE B.RN BETWEEN #{begin} AND #{end}
	</select>
	 <!-- * map의 key값 begin과 end를 그대로 사용할 수 있다-->
		 
		 <!-- * typealias로 인해 EmpDTO로 줄여서 씀-->
 	
	 	<!-- * 매개변수로 전달받은 파라미터 순서를 알고서 #{param1}, #{param2}.. 로 이용할 수 있다
	 		 #{param1} = int begin,  #{param2} = int end
	 	-->
	 	
	 	<!--  * RIGHT JOIN 인 이유 : 부서번호가 없는 EMPLOYEE의 정보도 얻기위해서 -->
	 	
	 	
	 	
	 <!--  # 사원번호, 부서번호 조회 : 단순조회 -->
	 <!--  Map = 파라미터 column과 query의 값이 들어가있음
	 	   query는 area1의 파라미터-->
	 <select id="selectFindEmployeesCount" parameterType="Map" resultType="int">
	 	SELECT COUNT(*)
	 	 FROM EMPLOYEES E
	 	 <where>
		 	 <if test="column == 'EMPLOYEE_ID' or column == 'E.DEPARTMENT_ID'"> ${column} = #{query}</if>	<!--  * 검색 개수에 맞게 블록이 나오도록 만들때 주의 -->
		 	 <if test="column == 'LAST_NAME' or column == 'FIRST_NAME' or column == 'PHONE_NUMBER'"> ${column} LIKE '%' || #{query} || '%'</if>
		 	 <if test="column == 'HIRE_DATE'">  ${column} BETWEEN TO_DATE(#{begin}, 'YYYY-MM-DD') AND TO_DATE(#{end}, 'YYYY-MM-DD')</if>
		     <if test="column == 'SALARY'">  ${column} BETWEEN #{begin} AND #{end}</if>
	     </where>
	 </select>
	 
	 <!--  * if태그는 mybatis의 동적 sql이다 -->
	 <!--  * column은 파라미터 column을 의미한다 * (도서관참고)-->
	 <!--  * ${column} : 칼럼명은 ''를 붙여선 안되기 떄문에 $ 사용 / #{query} : ''를 붙이는 표현언어, 숫자는 $를 쓰든 #를 쓰든 상관없다 -->
	  <!--  * WHERE 태그 : 쿼리문 내 WHERE조건절을 대신한다, 단순히 쿼리문에 WHERE을 추가(mybatis3 doc 동적sql 참고)  -->
	 	
	 	
	 	
	 <!--  #  -->
	 <select id="selectFindEmployees" parameterType="Map" resultMap="EmpMap">
	 	SELECT B.*
	 	FROM(SELECT ROWNUM AS RN, A.*
	 		  FROM (SELECT E.*, D.DEPARTMENT_NAME, D.LOCATION_ID	
	 	  		FROM DEPARTMENTS D RIGHT JOIN EMPLOYEES E
	 	  		  ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
	 	  		   <where>
				 	 <if test="column == 'EMPLOYEE_ID' or column == 'E.DEPARTMENT_ID'"> ${column} = #{query}</if>
				 	 <if test="column == 'LAST_NAME' or column == 'FIRST_NAME' or column == 'PHONE_NUMBER'"> ${column} LIKE '%' || #{query} || '%'</if>
				 	 <if test="column == 'HIRE_DATE'">  ${column} BETWEEN TO_DATE(#{start}, 'YYYY-MM-DD') AND TO_DATE(#{stop}, 'YYYY-MM-DD')</if>
				     <if test="column == 'SALARY'">  ${column} BETWEEN #{start} AND #{stop}</if>
	   		 	 </where>
	 	 		ORDER BY HIRE_DATE DESC) A) B
	 	WHERE B.RN BETWEEN #{begin} and #{end}
	 </select>
	 
	 <!--  * 부서의 부서명과 장소도 추가로 조회 -->
	 
	 <!--  * 조인을 제일 안에 쓴 이유: 조인이 많으면 성능이 저하되기 떄문에, 가장 먼저 사용해서 검색의 폭을 줄인다  -->
	 
	  <!--  * rownum
	  - 기능 : 차례대로 순번을 매겨주는 가상칼럼
	  - 주의 : order by로 정렬된 테이블에 ROUNUM을 으로 순번을 구하는 경우 반드시 서브쿼리를 사용해야한다
	  - 이유 : ROWNUM이 조회될 SELECT문보다, ORDER BY문이 늦게 작동하기 떄문에, 정렬된 ROWNUM이 ORDER BY로 인해 뒤죽박죽으로 영향받기 때문
	  - 참고주소 : https://cbw1030.tistory.com/253
	  - 방법 : 먼저 ORDER BY로 정렬된 테이블을 FORM 내부의 가상테이블로 둔 다음에 ROWNUM을 구해야한다
	    -->
	    
	    <!--  * E.DEPARTMENT_ID인 이유 
	    - JOIN 사용시 DEPARTMENT_ID가 EMPLOYEES인지 DEPARTMENTS인지 테이블 소속을 명확히 하기 위해서 사용했다
	    - EMPLOYEE 테이블 하나만 조회하는 경우는 상관없지만, 두개의 테이블을 조회하는 경우에는 명확히 해줘야한다
	    
	     -->
	     
	   <!--  # 이메일, 성, 이름 자동완성  -->
	   <!--  * DISTINCT : 중복제거  -->
	   <select id="selectAutoCompleteList" parameterType="Map" resultType="EmpDTO">
			SELECT DISTINCT ${target}
			  FROM EMPLOYEES
			 WHERE ${target} LIKE CONCAT(#{param}, '%')
		</select>
	
	<!--  * ${target} : 쿼리문이라 ''를 붙여선 안됨 -->
	 	
 		


 
 	
 		
 		
 		
</mapper>