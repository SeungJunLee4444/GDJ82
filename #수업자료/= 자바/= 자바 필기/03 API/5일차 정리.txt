& 모르는 것
클래스메소드
)타임스탬프
)date util과 sql의 차이
상속 

-----------------------------------------------------------------------

& 팁
파일 누르고 f2 => 이름 바꾸기

-----------------------------------------------------------------------


& 학습목록
[1] 클래스 

* 클래스 호출 시, 꼭 ctrl + 스페이스바를 눌러서 추천으로 호출해야한다
(import가 호출될 수 있도록)
* 클래스의 동작을 함수, 메소드라 부르며 대체로 자바에서 클래스와 함께
쓰이는 객체의 다양한 기능을 말한다
* java.lage 패키지의 클래스들은 java를 작성할 필요도, import를 호출할 필요도 없다(예외)
* 같은 이름의 클래스는 import를 여러개 호출할 수 없다(클래스의 타입인식에 장애)

* ctrl + 클래스명 => 클래스 파일로 이동가능


1. 날짜 클래스
1) System 클래스

-----------------------------------------------------------------------

2) Date 클래스
(1) util 패키지 date 
Date date1 = new Date(); 
=> Mon Jul 25 13:49:17 KST 2022
=> 범용적인 날짜, 시각적 정보에 사용됨(시,분,초 정보를 가져올 때)


(2) sql 패키지 date 
Date date2 = new Date(System.currentTimeMillis());
=> 2022-07-25
=> 데이터 베이스용



-----------------------------------------------------------------------

3) Calendar클래스
=> 현재 날짜나 특정날짜 표현
=> 날짜의 년,월,일,요일,오전오후시,분,초를 표현할 수 있음

(1) 현재 날짜 표현하는 법
{1} 클래스 선언, 객체 생성
Calendar cal = Calendar.getInstance();

{2} get 메소드로 날짜값 저장 
int year = cal.get(Calendar.YEAR);		=> 년	
int month = cal.get(Calendar.MONTH + 1); 	=> 월 
int date = cal.get(Calendar.DAY_OF_MONTH);	=> 일(월중일)
int weekNo = cal.get(Calendar.DAY_OF_WEEK);	=> & 일(주중일)
int ampm =cal.get(Calendar.AM_PM);		=> & 오전오후(오전은0, 오후는1)
int hour12 = cal.get(Calendar.HOUR);		=> 시(1~12)
int hour24 = cal.get(Calendar.HOUR_OF_DAY);	=> 시(0~23)
int minute = cal.get(Calendar.MINUTE);	=> 분(0~59)
int second = cal.get(Calendar.SECOND);	=> 초

* ctrl + 클래스명 => 클래스 파일로 이동해서 해당 난수값을 가져오는 방법도 있으나,
=> 위와같이 메소드를 호출하는 것이 더 간편함

& 요일과 오전오후여부는 한글로 출력해야 하는 부분이기 때문에
switch문을 이용해서 문자열로 출력해야한다

{3} 호출
System.out.println(year); ~

* if, switch를 통한 응용

switch(weekNo) {
case 1: System.out.println("일요일");
case 2: System.out.println("월요일");
case 3: System.out.println("화요일");
case 4: System.out.println("수요일");
case 5: System.out.println("목요일");
case 6: System.out.println("금요일");
default: System.out.println("토요일");
}

switch(ampm) {
case 0 : System.out.println("오전"); break;
case 1 : System.out.println("오후"); break;
} 


(2) 패턴 적용법(Date타입용)
{1} 클래스 선언(다른 패키지별로)
Date date1 = new Date();
java.sql.Date date2 = new java.sql.Date(System.currentTimeMillis());
* 같은 클래스를 import 하는건 불가능하다(인식에 혼동이 오기 때문)

{2} 패턴형식 만들기
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-mm--dd HH:mm:ss");

* 날짜 패턴입력시 규칙
년
yy    => 22
yyyy  => 2022
월
M     => 7
MM	 => 07
MMM 	 => Jul (Jan~Dec) 세글자만
MMMM  => July (풀네임)
일
d     => 1
dd    => 01
요일
E  	 => 월~일
오전오후
a	 => 오전/오후 
시간
h  	 => 9(1~12)
hh   => 09(01~12)
H    => 9(0~23)
HH   => 09(00~23)
분
m 	 => 5(0~59)
mm	 => 05(0~59)
초
s	 => 7(0~59)
ss   => 07(0~59)

{3} String 타입에 값을 저장
String result1 = sdf.format(date1);
String result2 = sdf.format(date2);

{4} 출력
System.out.println(result1);
System.out.println(result2);


-----------------------------------------------------------------------

4) LocalDateTime 클래스
=> 위의 Calendar과 같은 기능을 수행함
=> Calendara보다 간편하나, 최근에 만들어진 클래스라 아직 과도기단계
=> 위의 Calendar을 아직 현업에서는 많이 사용한다

(1) 사용법 1 : 날짜반환
{1} 클래스 선언, 객체 형성
LocalDateTime now = LocalDateTime.now();
=> Calendar과 달리, 여기서부터 깔끔한 날짜값이 어느정도 나온다 *

{2} 메소드활용
int year = now.getYear();			=> 년
int month = now.getMonthValue();		=> 월
int day = now.getDayOfMonth(); // 1~31	=> 일(월기준일)
int hour = now.getHour();			=> 시
int minute = now.getMinute();		=> 
int second = now.getSecond();		=> 년

{3} 전부 출력
System.out.println(now);

(2) 날짜가 출력되는 패턴 지정(LocalDateTime용)
{1} 패턴형식 만들기 
DateTimeFormatter dtf = DateTimeFormatter.ofPattern("a h:mm yyyy-MM-dd");

{2} String 객체에 저장 
String date = dtf.format(now);
=> DateTimeFormatter.ofPattern
=> 패턴에 객체값을 저장하려면 String 객체에 저장해야한다
{3}


-----------------------------------------------------------------------
-----------------------------------------------------------------------


2. String 클래스

* 문자값의 주소값을 객체에 저장

요약
String 클래스의 메소드들
1) str.equalsIgnoreCase 	=> 대소문자 무시하고 비교 
2) str.length 			=> 문자열 길이
3) str.charAt(0)		=> 인덱스값을 지닌 위치의 문자 출력
4) str.substring(0,1)		=> 인덱스0부터 1까지의 문자열 출력(1제외)
   str.substring(1)		=> 인덱스 1부터 끝까지 문자열 출력
5) str.indexOf("문자열")		=> 문자열 앞에서부터 해당 문자열이 위치한 인덱스값
   str.lastIndexOf("문자열")  	=> 같은 문자열이 중복될 때, 중복 문자열의 제일 마지막
				   에 위치한 문자열의 인덱스값
int idxOfDot = fullName.lastIndexOf("."); * 인덱스값을 구할떄 int값에 저장해야한다


* if와 주로 사용
6) str.startWith("");		=> 문자열이 특정 문자열로 시작하는지?
7) str.endsWith(""); 		=> 문자열이 특정 문자열로 끝나는지?
8) str.contains(""); 		=> 문자열에 특정 패턴이 포함되는지?

9) str.trim();			=> 문자열 좌우 공백 지우기
   str.trim(); length();	=> 공백을 제외한 나머지 문자열의 길이

10) str.toUpperCase(): 		=> 대문자로 변환하기
11) str.toLowerCase(); 		=> 소문자로 변환하기
12) str.replace("a", "b");	=> 문자열 내용에서 a를 b로 바꿔라
    str.replaceAll(".", "_");	=> All타입은 괄호 앞의 내용이 문자열이 아닌 정규식
				=> 값이 전부 __________나옴을 주의 *

13) str.isEmpty();		=> str이 비어있는지? * 공백은 비어있지않은 것으로 간주
    str.trim(); isEmpty();	=> 공백을 지우고, 비어있는지 검사 

-----------------------------------------------------------------------


1) 문자열 동등비교
(1) 참조하는 주소값 확인(==)
String str1 = "hello";
String str2 = "hel";
System.out.println(str1 == str2); 
=> 참조하는 주소값이 같은가? 

(2) 문자열 동일여부 확인(equals.)
String str3 = new String("hi");
String str4 = new String("hi");
boolean result = str3.equals(str4);
=> 새로 객체를 만들었기 때문에 주소값이 다르다
=> 두 문자열이 동일한가?(주소상관x)

(3) if 조건문 활용과 값 반대로 출력하기 * 잘 안쓰임
if(!str3.equals(str4)) {
	System.out.println("8:" + "str3, str4는 달라요");
} else {
	System.out.println("9:" + "str3, str4는 같아요");
}

-----------------------------------------------------------------------

2) 대소문자를 무시한 문자열 동등비교
(1)
String str5 = "Hello World";
String str6 = "hELLO wORLD";
=> 자바에서는 대소문자는 엄연히 다른 문자로 인식한다

(2)
boolean result3 = str5.equalsIgnoreCase(str6);
=> equalsIgnoreCase 메소드로 대소문자를 무시하고 비교를 실시
=> true

3) 문자열의 길이 반환
String name = "우영우";
int length = name.length();
=> length 메소드로, 문자열의 총 길이를 알 수 있다
=> 3

* String name = "우영우  ";
=> 공백도 문자열로 취급해서 길이가 출력된다
=> 5

4) 특정위치 문자만 반환(하나씩)
* String name = "우영우  ";
System.out.println(name.charAt(0)); 
=> 우
=> charAt(인덱스값) 메소드를 통해, 특정 위치의 문자를 출력할 수 있다

* index
=> 글자마다 부여된 정수값으로 0부터 시작한다 


5) 문자열의 '일부' 문자열을 반환
String name = "우영우  ";

(1) System.out.println(name.substring(0,1));
=> 인덱스값 0에서 1까지의 문자열을 출력
=> 우 
* 끝나는 범위인 1은 제외

(2) System.out.println("9:" + name.substring(1));
=> 영우
=> 시작값만 입력하면, 시작 값 이후의 모든값 출력


6) 특정 문자열의 해당 인덱스 값을 반환(출력)
(1) inderOf("문자열"); 
=> 문자열이 시작되는 인덱스값 출력
int idx1 = name.indexOf("우"); 
=> 0
int idx2 = name.indexOf("영우"); 
=> 1

(2) lastInderOf(); 메소드 사용
=> 발견된 마지막 문자열이 인덱스를 반환
int idx3 = name.lastIndexOf("우"); 
=> 2
int idx4 = name.lastIndexOf("승준"); 
=> -1

* 값이 없으면 -1을 반환


7) 문자열이 특정 패턴으로 시작하는가? boolean(true, faluse)
if(name.startsWith("이")) { 
	System.out.println("이씨입니다");
} else {
	System.out.println("민씨가 아닙니다");
}
=> startWith("문자열") 메소드를 활용


8) 문자열이 특정 패턴으로 끝나는지 여부를 boolean(true,false) 반환
String filename = "image.jpg"; // jpg, png로 끝나면 이미지로 가정

if(filename.endsWith("jpg") || filename.endsWith("png")) {
	System.out.println("이미지입니다");
} else {
	System.out.println("이미지가 아닙니다");
}
=> endWith("문자열") 메소드를 활용
=> 확장자명으로 문자열을 구분할때 유용 *


9) 문자열이 특정 패턴을 포함하는지 여부를 boolean(true,false) 반환
String email = "gt_lee@naver.com"; // @, .		
if(email.contains("@") && email.contains(".")) {
	System.out.println("이메일입니다");
} else {
	System.out.println("이메일이 아닙니다");
}
=> contain("문자열");

10) 불필요한 공백 제거(좌우공백)
String message = "   안녕   하세요   "; 
System.out.println(message.trim());
=> trim 메소드를 통해 문자열 앞뒤의 공백을 없앨 수 있다(가운데x)
* System.out.println(message.trim().length());
= 공백이 제거된 후 문자열의 길이

11) 대소문자 변환하기
String source = "best of best";
System.out.println(source.toUpperCase());
=> 대문자로 변환
System.out.println(source.toLowerCase());
=> 소문자로 변환

12) 특정 문자열을 찾아 바꾸기
(1) replace 메소드
* String source = "best of best";
String replaced = source.replace("best" , "worst");
=> best를 worst로 전부 바꾸기
* source의 소스값이 바뀐건 아님

(2) replaceAll 메소드 
String ip = "192.168.101.91";
String replacedIP = ip.replaceAll(".", "_"); 
=> ___________________
=> replaceAll'에서 괄호 안 "."의 위치는 문자열이 아닌 정규식 *
System.out.println(replacedIP);
* . 정규식(regex)에서 임의로 집어넣는 값
=> [] 괄호 등 여러 기호를 집어넣지 않으면 기본적으로 전부 값을 특정기호로 바꾸는 식으로 진행된다  *


13) 빈 문자열인지 확인 후, if로 참거짓 여부확인
String id = " ";
if(id.trim().isEmpty()) {
	System.out.println("빈 문자열");
} else {
	System.out.println("빈 문자열 아님");
}


-----------------------------------------------------------------------
-----------------------------------------------------------------------

3. StringBuilder 클래스
=> 문자열을 합치는 역할을 수행한다(그뿐)
=> 해당 클래스의 메소드도 딱 두가지

1) append(); 메소드
StringBuilder sb = new StringBuilder();
sb.append(1);
sb.append(true);
sb.append('T');
sb.append(3.14);
sb.append("hello");
		
System.out.println(sb);
//=> StringBuilder.append()는 문자열을 합쳐서 나열하는 역할만 한다 *
		
2) toString(); 
=> 스트링 타입으로 변환

* System.out.println(sb.equals("1trueT3.14hello"));
=> false 
=> StringBuilder은 string타입이 아니기 때문에, 변환시킨 후에 string타입의 메소드를 사용할 수 있다

=>
String result = sb.toString();
System.out.println(result.equals("1trueT3.14hello")); 
=> true

ex) stringbuilder로 a부터z까지의 모든 알파벳을 문자열로 합치고 string타입으로 전환 후 ns단위로 연산시간 반환
StringBuilder sb2 = new StringBuilder();
		long begin2 = System.nanoTime();
		for(char ch = 'a'; ch <= 'z'; ch++) {
		sb2.append(ch);
		} 
		long end2 = System.nanoTime();
		String alphabet2 = sb2.toString();
		System.out.println((end2 - begin2) + alphabet2);



-----------------------------------------------------------------------
-----------------------------------------------------------------------

4. Scanner 클래스
=> java.util.Scanner 
=> JOptionPabe보다 이걸 쓰는게 나음
=> 데이터 타입별로 입력받을 수 있는 메소드를 제공
=> 콘솔에 직접 문자열을 입력할 수 있다 *

1) 선언
Scanner sc = new Scanner(System.in);
=> (System.in)로 콘솔에 직접 정보를 입력 가능해진다

2) 입력
System.out.print("이름을 입력하세요 >>>  ");
String name = sc.next();
* char gender = sc.next();charAt(0);
=> 문자, 문자열 값 출력, 0번째 인덱스값만 *
=> 공백이 인정안되는 문자열값 입력가능

3) 출력
System.out.println(name);

* 타입에 따라 쓰는 메소드가 다르다
=> int		: nextInt();
=> long		: nextLong();
=> double 	: nextDouble();
=> char, String	: nextLine(); -공백포함가능, next() -공백포함 불가능

=> 실행문

=> sc.close(); (생략 가능)



