& 앞으로의 수업 진행방향
변수, 제어문 => 절차지향
클래스(api 이미 만들어져있는 클래스) 사용 : 이런 기능을 쓸 수 있다

1. [사용자 클래스 생성
캡슐화
상속
다형성] => 클래스를 직접 만드는 과정

2.개발자 소양 누구든할수있음
예외처리
io스트림
네트워크


& 학습목록
[1] 연산자(2)
[2] 제어문

[1] 연산자

1. 비교연산자
1) 종류
(1) 크다 : >
(2) 작다 : <
(3) 이상 : >=
(4) 이하 : <=
(5) 같다 : ==
boolean result5 = a == b;
(6) 같지않다 : !=
boolean result6 = a != b;

2. 논리연산자
1) 종류
(1)&& => 조건이 전부 맞아야, 값이 true
boolean result = ( a == 10) && ( b == 10);

(2) || => 조건 중 하나라도 맞으면, 값은 true
boolean result = ( a == 10) || ( b == 10);

(3) ! => 값이 true면 false로, 값이 false면 true로 변경한다
boolean result = !( c == 10);

2) 특징 : short circuit evaluation
=> 왼쪽부터 조건의 참, 거짓 여부를 확인할 때
&&: 조건에서 false가 발생하면 더이상 연산을 멈춤, 어자피 값이 false기 때문
||: 조건에서 true가 발생하면 더이상 연산을 멈춤, 어자피 값이 true기 때문

ex)
int i = 10;
int j = 10;

boolean result = (i == 20) && (++j == 11);
=> 첫번째 조건식이 false라서, 값도 false
=> 두번째 조건식은 연산되지 않으면서 j값은 10이 된다

boolean result = (i == 10) || (++j == 11); 
=> 첫번째 조건식이 true라서, 값도 true
=> 두번째 조건식은 연산되지 않으면서 j가 10이된다

3. 조건연산자
=> 조건을 만족하는 경우와 그렇지 않은 경우를 모두 처리하는 연산
1) 형태
(1) String result = (조건) ? "참" : "거짓"
(2) String result = (조건) ? "참" : (조건) ? "거짓" : "없음" / 또는 ""; 

* 개발자식 사고 응용법
1) 짝수와 홀수 : 2를 나눈 나머지 값이 0이면 짝수, 1이면 홀수다
변수 % 2 == 0 => 짝수, * 0도 여기에 해당 
변수 % 2 == 1 => 홀수

2) 3의 배수: 3을 나눈 나머지 값이 0이면 3의 배수이다
변수 % 3 == 0 => 3의 배수

3) 조건연산자에서 홀수, 짝수, 3의 배수를 조건으로 정할 떄,
=> 자바의 연산은 왼쪽에서 오른쪽으로 하나씩 이루어진다
=> 3의 배수는 짝수, 홀수를 전부 포함하고 있으며,
=> 3의 배수 조건을 맨 뒤에 놓으면, 앞의 조건에서 짝수, 홀수로 전부 분류되버린다
=> 따라서 홀수, 짝수를 포함하는 내집합적 개념인 3의 배수를 제일 우선적으로 배치해야한다

4) 주민번호 1234567의 맨 앞자리가 1,3,5면 남자, 2,4,6이면 여자 **
=> (1) 변수값에서 1만을 나누면 맨 앞자리 1~7을 알 수 있다
=> (2) 이를 짝수와 홀수로 나눠서 구분하면 된다 

ex) 
int serial1 = 1123456;
String strSerial1 = ((serial1 / 10000) % 2 == 1) ? "남자" : "여자";

4. 문자열 연산자
ex) 
String str = "구디" + "아카데미";
		String str2 = 100 + "번지";
		String str3 = 1 + 1 + "행사"; // 2행사
		String str4 = 1 + "1" + "행사";

* 기본타입을 문자열로 변환하기 간편한 방법 : "" 더하기 *
1) 기존 : 
int grade = 100;
String strGrade = String.valueOf();

2) 간편 : String strGrade = 100 + ""; // 그냥 "" 씌우는 거랑 비슷한

[2] 제어문
1. if문 : 조건에 해당하는 경우만 처리
1) 형태:  if (조건, 비교연산자) {
실행문
}

2). if else 문: 조건에 해당하든, 안하든 모두 처리


3). 모듈러를 이용한 계산 *
=> 모듈은 반복되는 주기를 지닌 숫자들을(일, 주, 시간, 등) 나눈 값이 반복되는 것을 이용한 계산법
코드를 훨신 간편화시킬 수 있다
=> 여기서 도출된 나머지 값은 순환하는 특성을 지녔으며 모듈러로 처리한다
=> mod 변수는 나머지값을 담는 변수다

2. switch 문
=> if와 달리 조건문을 쓰지 않고, 표현식을 사용
=> double, boolean 타입을 사용할 수 없음
1) 형태: switch(표현식) {
case 1 : 실행문; break; 
case 2 : 실행문; break; 
...
default : 실행문}
* break가 없으면 다음 케이스도 실행시켜버림
* default는 따로 break를 쓸 필요없다
* default는 생략가능하다
	
		


			 