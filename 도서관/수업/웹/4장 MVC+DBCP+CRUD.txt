[4장 정리]
- 설명  	 : 'mvc의 기본패턴 + dbcp + crud(연습문제)
- 참고 jar  : taglib.jar + ojdbc6.jar + tomcat-dbcp.jar + lombok.jar

######################################################################
& jdbc와 dbcp의 차이
1) ojdbc	: 자바에서 데이터베이스를 연결하기 위한 인터페이스
- 한계 : db에서 정보를 가져올때마다 매번 db 연결을 열고 닫음
- jar : ojdbc.jar 사용

2) dbcp	
- 정의 : 데이터베이스 커넥션 풀
- 용도 : db와 커넥션을 맺고 있는 객체를 컨테이너에 담아 관리하는 역할을 함(서블릿처럼)
- 장점 : 원하는만큼 connection 객체를 만들어놓고 pool에 넣어 놓은채 필요할 때 마다 가져다
쓰고 반납하는 방식
- jar : tomcat-dbcp.jar 사용

=> jdbc보다 dbcp가 훨씬 효율적이기 때문에 dbcp가 사용된다


######################################################################

1. 초기화면 
index. jsp => list.do 요청 => 게시판이동

===========================================================


2. 게시판(list.jsp)
1) 새글작성하기 : write.do
2) 상세보기 : detail.do
- 특징 : 클릭하면 파라미터로 board.no값을 전달하며, board.no와 title값을 전달받는다(속성?)
3) 삭제하기 : remove.do
- 특징 : 클릭하면 파라미터로 board.no값을 전달하며, board.no를 전달받는다


===========================================================

3. 새글 작성하기(write.jsp)
- 용도 : 새글 작성을 위한 사이트로 이동
1) 서브밋 :add.do 
- 특징 : 서브밋 요청으로 add.do 서비스를 실행

- 서비스(BoardAddService)
(1) 요청받은 값들을 파라미터에서 꺼내기 : request.getParameter
(2) bto에 저장
(3) 저장된 dto로, dao의 insertBoard 메서드 실행
=> insertBoard는 dao(board)를 받으면 int값을 반환한다
(4) actionforward를 이용해 경로 반환 => 컨테이너에서 처리

& 리다이렉트 이동일 경우,
return시에 경로에 파라미터값과 inserBoard의 반환값을 같이 전달해줘야한다
(5) insertResut.jsp로 이동 
- insertResult.jsp는 결과만 알려주는 페이지, 스크립트로만 구성
- 게시글이 삽입되면 목록(list.do) 로 이동, 아니면 전 페이지로 이동(history.back)


---------------------------------------------------------

2) 목록으로 돌아가기 : list.do

write.jsp => list.do 요청 => list.do 게시판으로 단순이동

===========================================================

4. 상세보기(detail.jsp)

- 서비스(BoardDetailService)
1) optional과 전달받은 파라미터값 
- 파라미터를 통해 전달받은 board.no가 null값일 경우를 대처하기 위함
Optional<String> optNo = Optional.ofNullable(request.getParameter("no"));
long no = Long.parseLong(optNo.orElse("0"));
- 파라미터는 string타입
- null값일 경우에는 0으로 표현
- no 파라미터로 전달되는 boar.no는 long타입

2) 조건에 해당하는 경우에만 조회수 증가???????????????????????????????????????????????????

---------------------------------------------------------

3) 조회결과 가져오기
- dto 객체에, dao의 번호에 따른 조회 쿼리문을 실행하여 저장

---------------------------------------------------------

4) 요청에 결과 조회결과 저장후 이동
(1) 요청에 결과 저장 : request.setAttribute()
(2) detail.jsp로 이동(수정완료후 돌아오기)

---------------------------------------------------------

===========================================================

5. 수정하기
1) 요청하기 : edit.jsp에서 form 서브밋 : 
- 해당 작성인원의 게시글 title과 content를 파라미터로 전송
+ input type=hidden으로 숨겨져있는 no 파라미터도 전송
& 숨겨져있는 이유 : 번호는 수정사안이 아니지만, 수정시에는 no파라미터가 필요하기때문?

2) 수정 서비스 : 
(1) 파라미터에서 호출해 변수에 저장
(2) bto에 저장
(3) updateBoard 메서드 실행, 결과를 int에 저장
(4) 리다이렉트 경로 반환: 결과(res)와 번호(no)를 파라미터 전송

3) updateresult.jsp로 이동 : 스크립트로만 구성
- 반환된 int값이 0보다 클 경우에만 alert창을 true로 띄운다
- detail.jsp로 이동
& 이 때 detail.do 서비스를 요청하기 위해서는 no를 파라미터로 전달해줘야하기 때문에
경로에 no를 같이 작성해줘야한다

4) 수정된 detail.jsp로 이동

===========================================================

6. 삭제하기
1) list.jsp의 삭제버튼으로 이동
- 경로: ${contextPath}/remove.do?no=${board.no}
- 반환값으로 

