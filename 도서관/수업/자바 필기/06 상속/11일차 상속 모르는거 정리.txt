


1. 객체 선언과 생성
=> 객체 선언 : 클래스 타입 + 객체명; : 
=> 객체 생성 : new + 클래스의 생성자(); : 
=> 객체 선언과 생성 : 클래스타입 + 객체명 = new + 클래스의 생성자();
* 객체 생성시 참조값을 객체에 저장하게 됨(객체 호출시 주소값)

2. 업캐스팅
1) 형태
ex) Person p = new Student();
=> 부모 클래스타입의 객체에 자식 클래스의 필드를 담아주는 것
=> 객체 p는 부모클래스 타입이기 때문에, 필드의 접근범위가 부모타입만큼 제한된다
* 자식 클래스의 필드가 사라지는 건 아니고, 사용 불가능 상태가 됨


3. 다운캐스팅 instanceof 연산자
1) 형태
=> 업캐스팅된 객체를 다시 자식 타입으로 바꾸는 것
* 다운캐스팅에는 instanceof 연산자를 사용해야 한다

2) instance 연산자의 쓰임새

(1) 객체가 참조하는 클래스타입 참,거짓 여부
ex) 객체 + instanceof + 클래스타입 
=> 객체가 클래스를 참조하는가? (해당 클래스가 객체의 집인가?)

ex) 
Person person = new Person();
Student student = new Student();

person instanceof Person	// true	person은 Person 타입
student instanceof Student	// true
person instanceof Student	// false	Student는 자식타입
student instanceof Person	// true	student는 Person을 상속한다

(2) 다운캐스팅에 활용
if(student instanceof Person) {
	((Student))student).studentmethod();
}

* 객체배열에 응용

for(int i = 0; i < cars.length; i++) {
	if(cars[i] instanceof Hybrid) {
		((Hybrid)cars[i]).addOil();
	} else if (cars[i] instanceof Ev) {
		((Ev)cars[i]).charge();
	} else if (cars[i] instanceof Car) {
		cars[i].drive();
	}
}
=> car[i]가 Car타입의 배열이니 다운캐스팅을 한다?	


4. 객체배열
ex)
Example arr[] = new Example[2];
arr[0] = new Example();
arr[1] new Example();

=> 길이가 2인 arr 배열의 0번째 인덱스, 1번째 인덱스에 각각 객체생성
* arr[0] 과 arr[1] 은 참조값이 다르다


5. 정적바인딩, 동적바인딩
ex) * A클래스는 추상화, B클래스에 a 메서드를 오버라이징
A obj = new B();
=> obj.a();
=> obj 객체의 a 메서드를 호출하고(정적바인딩),
(동적바인딩 이후 오버라이징된 B 클래스의 a메서드를 반환







