[JSP 추가정리]

--------------------------------------------------------------------------------------------------------------

1. 파라미터를 통한 전달과 속성저장을 통한 데이터 전달
1) 파라미터 : 주로 JSP페이지에서 name 파라미터에 저장된 값을 백엔드 영역에서 전달받을 때 사용
- 형태 : request.getParameter("")
2) 속성 : 주로 백엔드 영역에서 JSP 페이지로 데이터를 전달할 때 사용된다
- 형태 : request.setAttribute("")

-------------------------------------------------------------------------------------------------------------

2. 코어라이브러리를 이용한 컨텍스트 패스 절대경로 변수화
<c:set var="contextPath" value="<%=request.getContextPath()%>" />
=> 이후에는 컨텍스트 패스를 ${contextPath}로 jsp페이지에서 사용할 수 있다
- 사용이유 : 컨텍스트패스(프로젝트명)이 변경되서 생기는 오류방지

-------------------------------------------------------------------------------------------------------------

3. request.getHeader("referer")
- 설명:  header에 저장된 이전 주소를 얻을 수 있는 코드

-------------------------------------------------------------------------------------------------------------

4. session은 object 타입
List<Map<String, Object>> cart = (List<Map<String, Object>>)session.getAttribute("cart");
- 설명 : session은 object 타입이기 떄문에 list타입으로 강제캐스팅이 필요하다

-------------------------------------------------------------------------------------------------------------

5. session.removeAttribute("cart");
- 설명 : session에 저장된 cart 속성을 제거한다

-------------------------------------------------------------------------------------------------------------

6. getAttribute는 단지 확인하는 메서드다
session.getAttribute("cart");
- 설명 : 해당 속성이 없어도 상관없다

-------------------------------------------------------------------------------------------------------------
7. session.invalidate();	
- 설명 : 세션에 저장된 값 초기화

-------------------------------------------------------------------------------------------------------------

8. request.getContextPath()
- 설명 : index.jsp(root)로 가는 메서드

-------------------------------------------------------------------------------------------------------------

9. request로 session얻기
HttpSession session = request.getSession();
session.setAttribute("login", login);
=> request 객체를 이용해 session에 접근할 수 있다

-------------------------------------------------------------------------------------------------------------

10. 쿠키와 세션을 이용한 로그인 초기화 및 유지
=> 2장 jsp 05 쿠키 참

-------------------------------------------------------------------------------------------------------------

11. 반응에 쿠키 저장해서 전달하기
response.addCookie(cookie);
=> response.에 쿠키를 저장할 수 있다

-------------------------------------------------------------------------------------------------------------

12. 쿠키는 값을 반환할때 배열로 반환한다
Cookie[] cookies = request.getCookies();

-------------------------------------------------------------------------------------------------------------

13. ${} 와 #{}의 차이

- #를 사용하면 변수값 앞뒤로 ''를 붇여준다, 즉 문자열로 변환된다
- $는 ''를 안붙이기 때문에 변수값만 들어감, 숫자형에 사용
 		   
* $는 숫자문자 구분하는 용도가 아닌, sql의 칼럼명을 가져올때 사용된다
=> 칼럼명도 변할 수 있으니 el변수화

-------------------------------------------------------------------------------------------------------------

14. getParameter()과 getAttrubute() 차이
getparameter
- 반환유형이 string
- 클라이언트의 html에서 전달된 파라미터값을 얻는데 사용

getAttribute
- 용도 : 이전에 다른 jsp 또는 servlet 페이지에 설정된 매개변수를 가져오는데 사용한다
- 이전의 setAttribute() 속성을 통한 속성값 설정이 필요하며, 없으면 null값을 반환한다

-------------------------------------------------------------------------------------------------------------

15. 파라미터의 전달 범위 ***
- 주의 : request, session 등 jsp 객체의 범위와는 관련없다
- 답 : 리다이렉트, 포워드가 파라미터의 전달 범위를 결정한다 ***
ex) a.jsp => 백엔드.java => b.jsp
(1) 리다이렉트 : 백엔드.java까지만 유효하다, b.jsp로 전달하고 싶으면 파라미터를 다시 전달해야함
(2) 포워드 : b.jsp에도 자동으로 파라미터값이 전달된다

-------------------------------------------------------------------------------------------------------------

16. setAttribute의 배열 변수 저장
- 답 : setAttrubute는 배열도 저장가능하며,
이는 c:forEach문을 이용해서 출력할 수 있다

String[] menus = {"김밥", "떡볶이", "순대"};
=> pageContext.setAttribute("menus", menus);

<c:forEach var="menu" items="${menus}" varStatus="vs">
	인덱스 : ${vs.index}, 순번 : ${vs.count}, 배열요소 : ${menu}<br>
</c:forEach>


ex) 