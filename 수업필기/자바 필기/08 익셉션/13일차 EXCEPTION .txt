& exception

& 요약
1) 프로그램 오류는 exception
2) 오류추적을 stacktrace
3) 각종 오류명들
(1) 없는값에 메서드 호출은 nullpointer
(2) 없는값을 변환하려들면 numberformat
(3) 0을 나눌 때 arithmetic
(4) 입력해야할 타입과 다른 타입을 입력할 때 inputmismach
4) 예외 클래스 구조는 exception -runtimeexception - uncheckedexception / checkedexception
(1) uncheckedexception은 try-catch 없어도됨
(2) checkedexception은 try-catch 있어야함
5) 예외문 작성
try {}  				: throw문 사용
				throw new RuntimeException("string 메시지")를 catch의 객체 e에 저장
				=> e.getMessage를 통해 메시지내용 호출가능

catch {예외} 				
finally{예외가 있든 없든 가장 마지막} : close 포함
6)

& exception은 주로 입력창에서 수정해야한다

1. 기본용어

1) error와 exception
=> error은 시스템 레벨의 오류, 컴퓨터를 바꿔서 수정해야하는 개발자 역량에 벗어난 문제
=> exception 프로그램 레벨의 오류를 칭하는 말, 개발자의 역량으로 해결가능한 문제
* 프로그램 개발에서는 error가 아니라 exception이라 말해야한다

2) stack trace : 오류창에서 오류를 추적하는 것을 말한다
=> 경고창에 빨간 오류가 쌓이는 것을 stack, 이걸 추적하는 것을 trace


2. exception 기본적인 예외처리
(1) NullPointerException
=> null값으로 메서드를 호출하려 들 때 발생한다
ex) 
for(int i = 0; i < hobbies.length; i++) {
	if(hobbies[i] != null && hobbies[i].equals("수영")) {
		System.out.println("취미가 나와 같군요");
	}
=> 앞에 null이 아닐때 조건이 없다면,  hobbies[i] = null인데, equal 메서드를 호출하려할때 오류발생

(2) NumberFormatException 
=> 값을 전달하지 않고 무언가 변환하려 할 때 발생
ex) 
String strAge = sc.nextLine();
int age = Integer.parseInt(strAge);	
=> strAge에 아무런 값을 입력하지 않는다면 오류가 발생

3. exception 클래스
(1) Exception 클래스 : 모든 예외 클래스의 슈퍼클래스
(2) RuntimeException 클래스 : 
	(3)Unchecked Exception 클래스 : (2)의 자식 클래스, try-catch 없이 작동 가능
	ex) NullPointer, NullFormat 등
(4) Checked Exception 클래스 : try-catch 반드시 있어야함

4. 예외문 형태
try{
	실행 코드

 }
catch(exception e) {
	
	예외처리 코드
 }
finally {
}
=> 실행코드에서 예외사항이 발생하면, catch가 잡아서 exception e 부모 클래스에 저장
=> 예외처리를 해결함으로 프로그램에 오류로 멈추지 않고 계속 실행

ex) 
public static void m2() {
try {						// # try 문
	String input = "20, 21, 22, 23, 24, 25";
	String[] inputs = input.split(",");		// & split 사용
	int[] ages = new int[inputs.length];	
	for(int i = 0; i < inputs.length; i++) {
	ages[i] = Integer.parseInt(inputs[i]);
	System.out.println("변환값:" + ages[i]);
}
						// # catch문 (다중사용가능)
} catch (NumberFormatException e) { 
	System.out.println("NumberFormatException 발생"); 
=> split는 공백을 처리하지 못하기 때문에 값을 처리못하고 변환이 이루어지면서,
numberforma 오류 발생
		
} catch (Exception e) {	
	System.out.println("Exception 발생");				
}

5. 추가 예외 클래스
1)
catch (ArithmeticException e)
=> 입력된 값 0, 0으로 나눌때 발생
2) 
catch (InputMismatchException e)
=> 입력되야 하는 값의 타입과 다른타입을 입력할 때
ex)
int a = sc.nextInt();
=> string, double, 20억 이상의 정수 등일 경우 오류발생

6. checked exception
ex)
try {
	File file = new File("C:\\sample.txt");
	FileReader fr = new FileReader(file);
	* 특정파일을 읽어보려는 코드
		
* 오류발생 : 파일이 없거나, 읽히지 않거나(io)
		
} catch (Exception e) {
	
}
---------------------------------------------


7. finally 블록
=> try-catch 마지막에 추가하는 블록
=> 대체로 close를 담는다( ex sc.close )
=> 예외가 있든 없든 무조건 마지막에 실행되는 블록
(try, catch 
* close는 finally에 넣기

ex)

1) sc.close의 위치문제
try {
Scanner sc = new Scanner(System.in);
	System.out.println("나이 입력 >>>");
         	String strAge = sc.nextLine();
          * int age = Integer.parseInt(strAge); *
	System.out.println(age > 20 ? "성인" : "미성년자");
sc.close();
} catch (Exception e) {~
=> 입력값이 잘못되면, *변환*에서 오류가 발생할 것이고, 이후 값이 출력되지않는다


Scanner sc = new Scanner(System.in);
	try {
	
	System.out.println("나이 입력 >>>");
	String strAge = sc.nextLine();
	int age = Integer.parseInt(strAge);
	System.out.println(age > 20 ? "성인" : "미성년자");
          *	sc.close(); *
	} catch (Exception e) {
		System.out.println("예외발생");
	} finally {
		sc.close();
		System.out.println("finally 블록 실행");
}
= finally 블록을 추가하여 close를 안에 넣는다
------------------------------------------
		
8. throw 
=> 자바가 인식못하는 예외 직접 던지기
ex) 나이를 50000살이라 입력한다면?

int age = Integer.parseInt(strAge);
	if(age < 0 || age > 100) {
	throw new RuntimeException("나이는 0 이상 100 이하만 가능합니다");
1) throw 사용
=> throw는 catch e한테 던지는 것
=> runtime은 string 타입의 메시지를 저장할 수 있다

catch (Exception e) {

2) 예외메시지 호출
=> runtimeexception의 예외메시지는 객체 e에 저장되어있다
=> System.out.println(e.getMessage()); 을 통해 호출가능
* 부모클래스 exception를 상속하는 자식클래스 runtimeexception 
* string 메시지는 runtime 자식클래스를 경유해 부모 클래스의 string 필드값에 저장된다
ex) exception e = new runtimeexception();
=> 부모 클래스의 멤버만 참조한다

3) 예시
try {
	count++;
	System.out.println("입력 >>>");
	int n = sc.nextInt();			// #1 예외처리구간 inputmismach
	if( n > 1 || n > 100) {		// #2 예외처리구간 2 1 미만, 100 초과
		throw new RuntimeException("1~00 사이의 정수만 입력할 수 있습니다");
	}
	sc.nextLine();
	return n;
} catch (InputMismatchException e) {
	System.out.println("정수만 입력할 수 있습니다");
	sc.next(); 				// * n에 잘못 입력된 값을 없애준다
	input(); 				// => 다시하라(재귀호출)
} catch (RuntimeException e) {
	System.out.println(e.getMessage());
	input();
}
return 0;					// * 이클립스 안심시키는 용도



============================================================

& 기타
1. nextLine() 
=> 내용이 없어도, 엔터를 입력하면 입력된 것으로 인식한다
=> next의 경우 , 내용없이 엔터만 누르면 다음으로 넘어갈 수 없다

2. 코드의 작동방향
=> 코드는 왼쪽에서 오른쪽으로 작동한다
ex) 
if(hobbies[i] != null && hobbies[i].equals("수영"))
if(hobbies[i].equals("수영") && hobbies[i] != null)	
=> 위와 아래의 코드는 다르다
* 좀더 교집합적인 범위를 조건문의 앞에 작성하는 것이 중요하다 

3. split 메서드
=> 문자열을 표현식으로 나눠 배열로 만든다
ex) 
String input = "20, 21, 22, 23, 24, 25";
String[] inputs = input.split(",");
=> ,을 기준으로 문자열을 나누는 표현식을 사용한다
* input에서 , 뒤에 있는 공백은 split으로 처리할 수 없다
=> .trim을 사용해 해결하기	
ex) input.trim().split(input);

4. split 와 replace
ex) 
String input = "20, 21, 22, 23, 24, 25";

5. 배열 한칸 줄이고 마지막 값 리셋하기 ******************************************
배열의 길이: 10
idx : 현재 값이 채워진 배열의 길이
 
1) 정리
(1) System.arraycopy(cars, i + 1, cars, i, idx -i -1);
i + 1 : 제거하고자 하는 배열위치의 바로 뒤
i : 현재 배열의 위치
idx -i -1 : 현재 위치에서 배열 끝방향의 거리(

(2) cars[--idx] = null;
=> idx5의 값을 없앨려면 하나 줄인 배열의 위치인 4의 값을 없애야 한다




