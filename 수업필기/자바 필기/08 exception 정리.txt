& exception 클래스
1. 다양한 오류값들
=> nullpointer		: 없는 값으로 메서드호출 시
=> numberformater 	: 없는 값으로 변환오류
=> input			: 요구하는 것과 다른 타입을 저장, 입력할때

2. 예외 클래스 상속관계
(seriarizable(타입)) - (throwable) - exception - runtimeexception - uncheckedexception
	-checkedexception

* exception
=> 모든 예외클래스의 상위 클래스기 때문에,
 catch문에서 다중사용 시 제일 밑에 두어야한다
=> 기본적으로 String타입 필드값을 가지고 있다
(자식예외클래스에게 상속가능)
* e.getMessage 객체.메서드로 예외문을 throw받아 예외메시지를 출력한다

* uncheckedexception은 trycatch를 생략가능, checkedexception은 생략불가


3. 예외클래스 구조
try {		}
catch {		}
finally {		} : 제일 마지막에 작성, 코드 종료나 db관련


4. throw 
1) 자바에서 인식하는 오류가 아닌, 개발자가 임의로 만든 오류일 경우 사용한다
ex) 나이가 5000살일때 오류로 설정하기
2) throw는 return처럼, 예외가 작동하면 아래로 코드가 실행되지않는다

5. throws 
=> 여러번 예외사항을 던질수도 있다
ex) public inn input() throws MyException
=> 메서드 뒤에 작성

1) throws 생략-------------------------------------------------------------------------?
(1) runtimeexception(부모)과 uncheckedexception에 속하는 클래스는 메서드 뒤의 작성을 생략해도된다
=> trycatch도 생략 가능하나 왠만하면 작성하고, throws도 실행에 오류는 없지만 작성할것 -------------------?
(2) 직접 생성한 예외클래스는 trycatch, throws 전부 생략 불가능하다 

2) throws 다시 던지기
ex) 
(1) deposit 메서드에서 던지기
public void deposit(long money) throws BankException {
if(money < 0) {
throw new BankException("마이너스 입금 불가", 1);

(2) withdrawl 메서드에서 던지기 
ublic long withdrawl(long money) throws BankException {
if(money < 0) {
	throw new BankException("마이너스 출금 불가", 2);
} else if(balance < money) {
	throw new BankException("잔액부족", 3);
} 

(3) transfer에서 던진 메서드를 호출
public void transfer(Bank acc, long money)  {
acc."deposit(withdrawl(money));"	
* 오류발생
=> throw 던지기는 해당 메서드를 호출하는 쪽으로 날아가기 때문이다.
 * 해결책  
=> trycatch를 하거나 / 다시 던지거나
ex) public long withdrawl(long money) 에 throws BankException 


6. 직접 예외클래스 만들기 
=> 클래스 extends Exception만 하면 된다
=> 추가적으로 serialVersionUID를 추가하면 된다(선택)

7. 예외상황이 없는 경우
ex) public void inquiry() 
=> 정보출력만을 위한 메서드는 예외상황이 발생x	

=============================================================

& 기타
1) stack trace : 오류를 찾아내는 과정

2) next / nextLine 
next : 공백을 입력값으로 포함 안함
nextLine : 공백을 입력값으로 포함 / 입력값 저장 후, 엔터값을 먹는 용도로 활용

3. split 메서드-------------------------------------------------?
=> 하나의 문자열을 특정 기준으로 잘라 문자열배열로 만들어주는 메서드
ex) 
String input = "20, 21, 22, 23, 24, 25";
=> String[] inputs = input.split(",")
=> "20", "22", "22", "23", "24", "25"

* split는 공백을 별도로 인식하지 못하고 숫자값을 각 배열에 저장할 것

4. 특정 파일을 읽어보려는 코드
ex)
File file = new File("C:\\sample.txt");
FileReader fr = new FileReader(file);

5. 스코프 조정
=> 괄호 범위에 따라 코드를 조정하는 것을 말한다

6. 롬복

@AllArgsConstructor	: 직접 만든 생성자
@NoArgsConstructor	: 디폴트 생성자
@data			: set,get + tostring

7. this 코드
System.out.println(this);
=> 클래스 - 메서드 중에서, 현재 저장된 값을 출력

& 코드
1) 배열값 중에 내가 원하는 값과 같은게 있는지 확인하기
ex) 취미들 중에 내가 좋아하는 취미와 같은지 여부 확인하기
String[] hobbies = new String[5];
hobbies[0] = "농구";
hobbies[1] = "수영";
hobbies[2] = "골프";
hobbies[3] = "영화";
hobbies[4] = "집콕";

for(int i = 0; i < hobbies.length; i++) {
	if(hobbies[i].equals("수영")) {
	System.out.println("취미가 나와 같군요");
	}
}

2. 특정 객체를 배열이 있는 객체에 저장하기

Car car = new Car(carNo, model);	// * 반복문 x
cars[idx++] = car;