& 상속(3)

& 복습
1) 추상메서드는 전부 자식클래스에서 오버라이징할것

1. 인터페이스
=> 작업지시서 라고한다
=> 다른 클래스를 작성할 때 기본이 되는 틀을 제공
=> 인터페이스 안에 추상화된 메서드를 작성한다
=> 부모클래스를 작업지시서로서, 자식클래스에 오버라이딩해서 작성하는 것
* 선언시 업캐스팅이 대체적 
=> 부모클래스 객체 = new 자식생성자(); : 부모 클래스가 추상화라 내용이 대체로 없기 때문
* 클래스를 상속받으라 = 인터페이스를 구현하라는 결국 같은 이야기다


* 사용법
1) 부모클래스에 interface를 쓰면, 
2) 자식 클래스에 부모 클래스에 추상화된 메서드들을 오버라이징하여 
구현하게된다, 이때 extends를 implement(구현)로 작성한다

* 추상화가 잘 안보이는 이유 : abstract class를 대체로 interface로 이름짓기 때문에 
* abstrace class가 interface가 되고, extends가 implement가 된다는 점에서 추상화와 형태는 같다

2. 부모클래스가 복수일 때(다중상속)
ex) public class SmartPhone extends Phone, Computer {}
=> 자바에서는 못씀
ex) 
=> 대안으로 나온것이 인터페이스
public class SmartPhone extends Phone implement Computer

3. 인터페이스 응용
ex) Pet(부모클래스), dog, cat, snake가 자식클래스일 때, 
먹이를 주는 메소드를 만든다 가정하고, dog, cat은 성공, snake는 실패시키는 방법은?

=> 과정중 매개변수에 Pet pet을 넣을 수 없다
해결 : 인터페이스를 만들어 dog, cat 클래스에 implements 로 부여,
매개변수를 인터페이스명 pet로 대체한다 


& 기타
1) Math.abs => 절댓값 출력 메서드

2) static 메서드
static 메서드를 사용하면 객체 생성없이 필드값, 메서드 호출이 가능해진다
ex) public final static double PI = 3.141592;
=> 상속받은 다른 클래스에서 PI 즉시 호출가능

3) 접근제한자
(1) public 어디서든 접근 가능
(2) private 현재 객체에서만 접근가능
(3) default 같은 패키지 내에서만 접근가능

4) 매개변수에서 클래스 선언
ex)
public void foodFeed(Pet pet, String food) {

=> pet 클래스는 dog, cat, snake를 전부 저장할 수 있는 클래스 타입이다
ex) String에 모든 문자열을 저장할 수 있고, int에 20억 위아래의 모든 정수를 저장할 수 있듯이
		


=================================================
=================================================


[BEAN]

BEAN 

1. singleton Pattern
2. builder 패턴














































