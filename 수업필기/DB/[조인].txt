[시퀸스]

DROP SEQUENCE DEPARTMENT_SEQ;
CREATE SEQUENCE DEPARTMENT_SEQ
    START WITH 1
    INCREMENT BY 1
    MINVALUE 1
    MAXVALUE 100
    NOCACHE
    NOCYCLE;

[부모테이블에 없는 값을 자식 테이블에서 지니는 법]
-참조하고있는 자식테이블의 외래키를 일시중지 시키고, 데이터 삽입 후 외래키 재시작

1) 외래키 일시중지
-------------------------------------------------------------
LTER TABLE EMPLOYEE
    DISABLE CONSTRAINT FK_EMPLOYEE_DEPARTMENT;
-------------------------------------------------------------

2) 참조무결성 위배 데이터 삽입

-------------------------------------------------------------
INSERT INTO EMPLOYEE VALUES(EMPLOYEE_SEQ.NEXTVAL, '신현준', 5, '대리', 'M', '98-12-01', 3500000);
COMMIT;
-------------------------------------------------------------

3) 외래키 재시작
-------------------------------------------------------------
ALTER TABLE EMPLOYEE 
    ENABLE CONSTRAINT FK_EMPLOYEE_DEPARTMENT;
-------------------------------------------------------------

[조인]

1. 조인의 종류

1) 크로스조인(카테젼곱)
=> 조인에서 조건을 작성 안하면 발생(오류)
=> 양쪽 테이블의 조합으로 나올수 있는 모든 경우의 수가 조회된다

ex)
-------------------------------------------------------------------------
SELECT E.EMP_NO, E.NAME, E.SALARY, D.DEPT_NO, D.DEPT_NAME
  FROM DEPARTMENT D  CROSS JOIN EMPLOYEE E;
-------------------------------------------------------------------------

2) 이너조인
=> 조건에서 비교하는(주로 pk값) 값이 일치하는 데이터만 조회

ex)
-------------------------------------------------------------------------
SELECT E.EMP_NO, E.NAME, D.DEPT_NAME
  FROM DEPARTMENT D INNER JOIN EMPLOYEE E
    ON D.DEPT_NO = E.DEPART;
-------------------------------------------------------------------------

3) 아우터조인(left, right)
=> 한 테이블을 기준으로 전부 조인

(1) LEFT OUTER JOIN
=> 왼쪽 테이블의 데이터 전부 조인

ex)
-------------------------------------------------------------------------
SELECT E.EMP_NO, E.NAME, D.DEPT_NAME 
  FROM EMPLOYEE E LEFT OUTER JOIN DEPARTMENT D 
    ON E.DEPART = D.DEPT_NO;
-------------------------------------------------------------------------

(2) RIGHT OUTER JOIN
=> 오른쪽 테이블의 데이터 전부 조인
ex)
-------------------------------------------------------------------------
SELECT E.EMP_NO, E.NAME, D.DEPT_NAME 
  FROM DEPARTMENT D RIGHT OUTER JOIN EMPLOYEE E 
    ON D.DEPT_NO = E.DEPART; 
-------------------------------------------------------------------------

4) 셀프조인
=> 같은 테이블의 칼럼 두개를 조회


2. 조인의 형식								& 조인 방법 차이점
* 조건을 다는 부분에 차이점이 있음

1) JOIN
SELECT 칼럼
 FROM 테이블1 JOIN 테이블2
     ON 조인조건
WHERE

2) ,(콤마) 문법
SELECT 칼럽
 FROM 테이블1, 테이블2
WHERE 조인조건 
   AND 별도의 조건

3. 드라이브 테이블, 드리븐 테이블
=> 대체로 행이 작은 드라이브 테이블, 행이 많은 테이블이 드리븐 테이블


4. 실습

1) 직업 아이디(JOB_ID)가 변하지 않은 경우						& 내부 조인
=> EMPLOYEE 테이블과 JOB_HISTORY 테이블의 JOB_ID값이 같은경우를 말한다
=> 이너조인

2) 부서별로 사원수와 부서명을 함께 조회
* 테이블은 부서테이블과, 직원테이블이 존재
(1) 사원수  
--------------
=> COUNT(*) 
--------------
=> 사원수가 될수 있다
이유 : 이너조인을 사용하여 양쪽에 해당되는 값들만 카운트되기 때문에, 사원의 수가 된다

2) 부서별로 부서명 출력하기
----------------------------------------------------------------------
=> GROUP BY : DEPARTMENT_ID, DEPARTMENT_NAME
----------------------------------------------------------------------
=> 이름은 고유성이 떨어지기 때문에(동명이인), PK값인 DEPARTMENT_ID와 함께 그룹핑한다
(그룹핑을 사용하면 그룹핑에 들어간 칼럼만 SELECT에 들어갈 수 있음)

3) CITY 칼럼이 S로 시작하는 경우
----------------------------------
=>  WHERE L.CITY LIKE 'S%';
----------------------------------
=>

4) DEPARTMENT_ID가 없는 사원
ex)
-------------------------------------------------
=>  WHERE E.DEPARTMENT_ID IS NOT NULL; 
-------------------------------------------------
=> 값이 없는 경우는 IS NOT NULL
=> 이너조인을 사용한다면 공통된 값도 출력하기 때문에 D, E 둘다 가능


5) 부서번호가 없는 사원도 조회하고, 해당 사원들의 부서명은 'None'으로 조회			& 외부 조인

------------------------------------------------------------------
(1) FROM DEPARTMENTS D RIGHT OUTER JOIN EMPLOYEES E
------------------------------------------------------------------
=> 사원테이블에 외부조인 실시

------------------------------------------------------------------
(2) NVL(D.DEPARTMENT_NAME, 'None')
------------------------------------------------------------------
=> NULL인 값을 None으로 변경, 아니면 칼럼값 조회

6) 같은 부서의 사원들 중에 나보다 늦게 입사헀는데 연봉은 많이 받는 경우			& 셀프 조인
ex)
-------------------------------------------------------
(1) FROM EMPLOYEES 나 INNER JOIN EMPLOYEES 너
-------------------------------------------------------
=> 셀프조인, 같은 테이블을 내부조인한다
-------------------------------------------------------
(2) WHERE 나.HIRE_DATE < 너.HIRE_DATE
-------------------------------------------------------
=> 너, 가 더 최근에 고용됨
-------------------------------------------------------
(3) AND 나.SALARY < 너.SALARY;
-------------------------------------------------------
=> 너, 연봉이 더 높음


























